#!/bin/bash

# TypeScript Ïò§Î•ò ÏûêÎèô ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏
set -e

echo "üîß TypeScript Ïò§Î•ò ÏûêÎèô ÏàòÏ†ï ÏãúÏûë..."

# 1. ÌÉÄÏûÖ Ï†ïÏùò ÏàòÏ†ï
echo "üìù ÌÉÄÏûÖ Ï†ïÏùò ÏàòÏ†ï Ï§ë..."

# Common.ts ÏàòÏ†ï - RiskLevelÍ≥º QualityStatus export Ï∂îÍ∞Ä
cat > src/types/Common.ts << 'EOF'
export interface ToastProps {
  message: string;
  type: 'success' | 'error' | 'warning' | 'info';
  isVisible: boolean;
  onClose: () => void;
}

export type QualityStatus = 'excellent' | 'acceptable' | 'marginal' | 'unacceptable';
export type RiskLevel = 'low' | 'medium' | 'high';
export type ColorScheme = 'green' | 'blue' | 'yellow' | 'red';

export interface StatusConfig {
  readonly icon: React.ComponentType<{ className?: string }>;
  readonly text: string;
  readonly colorScheme: ColorScheme;
}

export type StatusConfigMap = {
  readonly [K in QualityStatus]: StatusConfig;
};
EOF

# Analysis.ts ÏàòÏ†ï - RiskLevelÍ≥º QualityStatus import Ï∂îÍ∞Ä
cat > src/types/Analysis.ts << 'EOF'
import { QualityStatus, RiskLevel } from './Common';

export interface StatisticalMetrics {
  readonly repeatability: number;
  readonly reproducibility: number;
  readonly gageRR: number;
  readonly partVariation: number;
  readonly totalVariation: number;
  readonly gageRRPercent: number;
  readonly ndc: number;
  readonly cpk: number;
}

export interface ANOVAResult {
  readonly operator: number;
  readonly part: number;
  readonly interaction: number;
  readonly error: number;
  readonly total: number;
  readonly operatorPercent: number;
  readonly partPercent: number;
  readonly interactionPercent: number;
  readonly errorPercent: number;
}

export interface AnalysisInterpretation {
  overall: string;
  repeatability: string;
  reproducibility: string;
  recommendations: string[];
  riskLevel: RiskLevel;
}

export interface GageRRAnalysis extends StatisticalMetrics {
  status: QualityStatus;
  anova: ANOVAResult;
  interpretation: AnalysisInterpretation;
}
EOF

# Timer.ts ÏàòÏ†ï - LapTime Ï∂îÍ∞Ä
cat > src/types/Timer.ts << 'EOF'
export interface TimerState {
  currentTime: number;
  isRunning: boolean;
}

export interface TimerControls {
  toggle: () => void;
  stop: () => void;
  reset: () => void;
}

export interface UseTimerReturn extends TimerState, TimerControls {
  recordLap: (operator: string, target: string) => void;
}

export interface LapTime {
  id: number;
  time: number;
  timestamp: string;
  operator: string;
  target: string;
  sessionId: string;
}
EOF

# Theme.ts ÏàòÏ†ï - THEME_COLORS export Ï∂îÍ∞Ä
cat > src/types/Theme.ts << 'EOF'
export interface Theme {
  bg: string;
  card: string;
  text: string;
  textSecondary: string;
  textMuted: string;
  border: string;
  accent: string;
  success: string;
  warning: string;
  error: string;
  input: string;
  surface: string;
  surfaceHover: string;
}

export type ThemeMode = 'light' | 'dark';

export const THEME_COLORS: Record<ThemeMode, Theme> = {
  light: {
    bg: 'bg-gray-50',
    card: 'bg-white',
    text: 'text-gray-900',
    textSecondary: 'text-gray-700',
    textMuted: 'text-gray-500',
    border: 'border-gray-200',
    accent: 'bg-blue-500',
    success: 'bg-green-500',
    warning: 'bg-yellow-500',
    error: 'bg-red-500',
    input: 'bg-white border-gray-300 text-gray-900 placeholder-gray-400',
    surface: 'bg-gray-50',
    surfaceHover: 'hover:bg-gray-100'
  },
  dark: {
    bg: 'bg-gray-900',
    card: 'bg-gray-800',
    text: 'text-white',
    textSecondary: 'text-gray-200',
    textMuted: 'text-gray-400',
    border: 'border-gray-600',
    accent: 'bg-blue-600',
    success: 'bg-green-600',
    warning: 'bg-yellow-600',
    error: 'bg-red-600',
    input: 'bg-gray-700 border-gray-600 text-white placeholder-gray-400',
    surface: 'bg-gray-700',
    surfaceHover: 'hover:bg-gray-600'
  }
} as const;
EOF

# 2. App.tsx ÏàòÏ†ï - Î∂àÌïÑÏöîÌïú import Ï†úÍ±∞ Î∞è Ìï®Ïàò ÏàúÏÑú ÏàòÏ†ï
echo "üîÑ App.tsx ÏàòÏ†ï Ï§ë..."

cat > src/App.tsx << 'EOF'
import React, { useState, useCallback, useMemo } from 'react';
import {
  Play, Pause, Square, Download, Plus, Users,
  Package, Clock, BarChart3, FileText,
  Zap, Target, HelpCircle, RefreshCw, LogOut,
  Moon, Sun, CheckCircle, AlertCircle, XCircle, Timer, Activity,
  Trash2, Filter, X, Minus, AlertTriangle, Info
} from 'lucide-react';

// ÏÉàÎ°úÏö¥ ÌÉÄÏûÖ Î∞è Ïú†Ìã∏Î¶¨Ìã∞ import
import { LapTime, SessionData } from './types';
import { 
  useTimer, useSession, useAnalysis, useTheme, useNotification, 
  useKeyboard, useBackButton 
} from './hooks';
import { 
  formatTime, validateSessionData
} from './utils';
import { ExportService } from './services';
import { KEYBOARD_SHORTCUTS, WORK_TYPES } from './constants';

// UI Ïª¥Ìè¨ÎÑåÌä∏Îì§ (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
const Toast = React.memo<{
  message: string;
  type: 'success' | 'error' | 'warning' | 'info';
  isVisible: boolean;
  onClose: () => void;
}>(({ message, type, isVisible, onClose }) => {
  React.useEffect(() => {
    if (isVisible) {
      const timer = setTimeout(onClose, 3000);
      return () => clearTimeout(timer);
    }
  }, [isVisible, onClose]);

  if (!isVisible) return null;

  const typeConfig = {
    success: { style: 'bg-green-500 text-white', icon: CheckCircle },
    error: { style: 'bg-red-500 text-white', icon: XCircle },
    warning: { style: 'bg-yellow-500 text-white', icon: AlertCircle },
    info: { style: 'bg-blue-500 text-white', icon: Info }
  };

  const { style, icon: Icon } = typeConfig[type];

  return (
    <div className="fixed top-4 right-4 z-[60] animate-in slide-in-from-right duration-300">
      <div className={`${style} px-4 py-3 rounded-lg shadow-lg flex items-center gap-2 max-w-sm`}>
        <Icon className="w-5 h-5 flex-shrink-0" />
        <span className="text-sm font-medium">{message}</span>
        <button onClick={onClose} className="ml-2 hover:bg-white/20 rounded p-1">
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
});

const BackWarning = React.memo<{ isVisible: boolean }>(({ isVisible }) => {
  if (!isVisible) return null;

  return (
    <div className="fixed bottom-4 left-4 right-4 z-[70] animate-in slide-in-from-bottom duration-300">
      <div className="bg-yellow-500 text-white px-4 py-3 rounded-lg shadow-lg flex items-center gap-2">
        <AlertTriangle className="w-5 h-5 flex-shrink-0" />
        <span className="text-sm font-medium">Ìïú Î≤à Îçî Îí§Î°úÍ∞ÄÍ∏∞ ÌïòÎ©¥ Ï¢ÖÎ£åÎê©ÎãàÎã§</span>
      </div>
    </div>
  );
});

const StatusBadge = React.memo<{
  status: 'excellent' | 'acceptable' | 'marginal' | 'unacceptable';
  size?: 'sm' | 'md' | 'lg';
  isDark: boolean;
}>(({ status, size = 'md', isDark }) => {
  const config = useMemo(() => {
    const statusMap = {
      excellent: { icon: CheckCircle, text: 'Ïö∞Ïàò' },
      acceptable: { icon: CheckCircle, text: 'ÏñëÌò∏' },
      marginal: { icon: AlertCircle, text: 'Î≥¥ÌÜµ' },
      unacceptable: { icon: XCircle, text: 'Î∂àÎüâ' }
    };
    return statusMap[status];
  }, [status]);

  const colors = useMemo(() => {
    const statusColors = {
      excellent: {
        light: { bg: 'bg-green-50', text: 'text-green-800', border: 'border-green-200', icon: 'text-green-600' },
        dark: { bg: 'bg-green-900/30', text: 'text-green-300', border: 'border-green-700', icon: 'text-green-400' }
      },
      acceptable: {
        light: { bg: 'bg-blue-50', text: 'text-blue-800', border: 'border-blue-200', icon: 'text-blue-600' },
        dark: { bg: 'bg-blue-900/30', text: 'text-blue-300', border: 'border-blue-700', icon: 'text-blue-400' }
      },
      marginal: {
        light: { bg: 'bg-yellow-50', text: 'text-yellow-800', border: 'border-yellow-200', icon: 'text-yellow-600' },
        dark: { bg: 'bg-yellow-900/30', text: 'text-yellow-300', border: 'border-yellow-700', icon: 'text-yellow-400' }
      },
      unacceptable: {
        light: { bg: 'bg-red-50', text: 'text-red-800', border: 'border-red-200', icon: 'text-red-600' },
        dark: { bg: 'bg-red-900/30', text: 'text-red-300', border: 'border-red-700', icon: 'text-red-400' }
      }
    };
    return statusColors[status][isDark ? 'dark' : 'light'];
  }, [status, isDark]);

  const sizeClasses = {
    sm: 'px-2 py-1 text-xs',
    md: 'px-3 py-1.5 text-sm',
    lg: 'px-4 py-2 text-base'
  };

  const iconSizes = {
    sm: 'w-3 h-3',
    md: 'w-4 h-4',
    lg: 'w-5 h-5'
  };

  const Icon = config.icon;

  return (
    <span className={`inline-flex items-center gap-1.5 font-medium rounded-full border ${sizeClasses[size]} ${colors.bg} ${colors.text} ${colors.border}`}>
      <Icon className={iconSizes[size]} />
      {config.text}
    </span>
  );
});

const ConsolidatedSupplyLogo = React.memo<{ isDark?: boolean; size?: 'sm' | 'md' | 'lg' }>(({ isDark = false, size = 'lg' }) => {
  const sizeConfig = {
    sm: { container: 'w-16 h-16' },
    md: { container: 'w-24 h-24' },
    lg: { container: 'w-64 h-64' }
  };

  const { container } = sizeConfig[size];

  return (
    <div className={`flex items-center justify-center ${container} mx-auto mb-6`}>
      <img
        src="/logo-rokaf-supply.png"
        alt="Í≥µÍµ∞ Ï¢ÖÌï©Î≥¥Í∏âÏ∞Ω Î°úÍ≥†"
        className="w-full h-full object-contain"
        style={{
          filter: isDark ? 'brightness(1.1)' : 'none'
        }}
        onError={(e) => {
          const target = e.target as HTMLImageElement;
          target.style.display = 'none';
          const parent = target.parentElement;
          if (parent && !parent.querySelector('.logo-fallback')) {
            const fallback = document.createElement('div');
            fallback.className = 'logo-fallback flex items-center justify-center w-full h-full bg-blue-600 text-white rounded-full text-sm font-bold';
            fallback.textContent = 'Ï¢ÖÌï©Î≥¥Í∏âÏ∞Ω';
            parent.appendChild(fallback);
          }
        }}
      />
    </div>
  );
});

const ModernLandingPage = React.memo<{
  isDark: boolean;
  onStart: () => void;
}>(({ isDark, onStart }) => {
  return (
    <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
      {/* Í≥†Í∏âÏä§Îü¨Ïö¥ Î∞∞Í≤Ω Ìö®Í≥º */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 right-20 w-96 h-96 bg-gradient-to-br from-blue-400/20 via-purple-500/15 to-transparent rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-32 left-16 w-80 h-80 bg-gradient-to-tr from-indigo-400/15 via-blue-500/10 to-transparent rounded-full blur-3xl"></div>
        <div className="absolute top-1/3 left-1/4 w-32 h-32 bg-gradient-to-r from-cyan-400/10 to-blue-500/10 rounded-full blur-2xl animate-bounce"></div>
        <div className="absolute bottom-1/4 right-1/3 w-40 h-40 bg-gradient-to-l from-purple-400/10 to-indigo-500/10 rounded-full blur-2xl"></div>
        <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-black/10"></div>
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(120,119,198,0.1),transparent_50%)]"></div>
      </div>

      <div className="relative z-10 flex flex-col items-center justify-start min-h-screen px-6 text-center pt-20">
        <div className="transform hover:scale-105 transition-transform duration-300 mb-16 mt-16">
          <ConsolidatedSupplyLogo isDark={isDark} size="lg" />
        </div>

        <div className="mb-20 space-y-6">
          <h2 className="text-4xl font-bold text-white leading-tight tracking-tight">
            Î¨ºÎ•ò ÏûëÏóÖÌòÑÏû•<br />
            Ïù∏ÏãúÏàò Ï∏°Ï†ï ÌÉÄÏù¥Î®∏
          </h2>
          <div className="inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-md border border-white/20 shadow-2xl">
            <div className="w-2 h-2 bg-green-400 rounded-full mr-3 animate-pulse"></div>
            <span className="text-blue-100 text-sm font-medium tracking-wide">
              Ï∏°Ï†ï, Í∏∞Î°ù, Ï†ÄÏû•, Î∂ÑÏÑùÏùÑ ÎèôÏãúÏóê
            </span>
          </div>
        </div>

        <button
          onClick={onStart}
          className="group relative overflow-hidden px-12 py-5 rounded-2xl font-bold text-xl shadow-2xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-2"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-white via-blue-50 to-white rounded-2xl"></div>
          <div className="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          <span className="relative z-10 group-hover:text-white transition-colors duration-300 flex items-center space-x-3 text-slate-800">
            <div className="w-6 h-6 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center group-hover:bg-white/20 transition-all duration-300">
              <Play className="w-4 h-4 text-white" />
            </div>
            <span>ÏãúÏä§ÌÖú ÏãúÏûë</span>
          </span>
          <div className="absolute inset-0 rounded-2xl border-2 border-white/20 group-hover:border-white/40 transition-colors duration-300"></div>
        </button>
      </div>
    </div>
  );
});

const MeasurementCard = React.memo<{
  title: string;
  value: string | number;
  unit?: string;
  icon: React.FC<any>;
  status?: 'success' | 'warning' | 'error' | 'info';
  theme: any;
  size?: 'sm' | 'md' | 'lg';
  isDark: boolean;
}>(({ title, value, unit, icon: Icon, status = 'info', theme, size = 'md', isDark }) => {
  const statusColors = useMemo(() => ({
    success: isDark
      ? { bg: 'bg-green-900/30', border: 'border-green-700', icon: 'text-green-400', text: 'text-green-300' }
      : { bg: 'bg-green-50', border: 'border-green-200', icon: 'text-green-600', text: 'text-green-800' },
    warning: isDark
      ? { bg: 'bg-yellow-900/30', border: 'border-yellow-700', icon: 'text-yellow-400', text: 'text-yellow-300' }
      : { bg: 'bg-yellow-50', border: 'border-yellow-200', icon: 'text-yellow-600', text: 'text-yellow-800' },
    error: isDark
      ? { bg: 'bg-red-900/30', border: 'border-red-700', icon: 'text-red-400', text: 'text-red-300' }
      : { bg: 'bg-red-50', border: 'border-red-200', icon: 'text-red-600', text: 'text-red-800' },
    info: isDark
      ? { bg: 'bg-blue-900/30', border: 'border-blue-700', icon: 'text-blue-400', text: 'text-blue-300' }
      : { bg: 'bg-blue-50', border: 'border-blue-200', icon: 'text-blue-600', text: 'text-blue-800' }
  }), [isDark]);

  const sizes = {
    sm: { card: 'p-3', icon: 'w-4 h-4', title: 'text-xs', value: 'text-sm' },
    md: { card: 'p-4', icon: 'w-5 h-5', title: 'text-sm', value: 'text-base' },
    lg: { card: 'p-6', icon: 'w-6 h-6', title: 'text-base', value: 'text-xl' }
  };

  const colors = statusColors[status];

  return (
    <div className={`${sizes[size].card} rounded-xl border transition-all duration-200 ${colors.bg} ${colors.border} hover:shadow-lg hover:scale-105`}>
      <div className="flex items-center justify-between mb-2">
        <Icon className={`${sizes[size].icon} ${colors.icon}`} />
      </div>
      <div className={`${sizes[size].title} font-medium ${theme.textMuted} mb-1 line-clamp-1`}>
        {title}
      </div>
      <div className={`${sizes[size].value} font-bold ${colors.text} font-mono break-all`}>
        {value}{unit && <span className="text-sm font-normal ml-1">{unit}</span>}
      </div>
    </div>
  );
});

const HelpModal = React.memo<{
  isOpen: boolean;
  onClose: () => void;
  theme: any;
}>(({ isOpen, onClose, theme }) => {
  const helpSections = useMemo(() => [
    {
      title: '‚å®Ô∏è ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§',
      icon: Timer,
      items: [
        { key: 'Ïä§ÌéòÏù¥Ïä§Î∞î', desc: 'ÌÉÄÏù¥Î®∏ ÏãúÏûë/Ï†ïÏßÄ', shortcut: 'SPACE' },
        { key: 'Enter', desc: 'Îû©ÌÉÄÏûÑ Í∏∞Î°ù (Ï∏°Ï†ï ÏôÑÎ£å)', shortcut: '‚èé' },
        { key: 'Esc', desc: 'ÌÉÄÏù¥Î®∏ Ï§ëÏßÄ', shortcut: 'ESC' },
        { key: 'R', desc: 'ÌÉÄÏù¥Î®∏ Î¶¨ÏÖã', shortcut: 'R' }
      ]
    },
    {
      title: 'üë• ÏûëÏóÖ Ïú†Ìòï ÏÉÅÏÑ∏',
      icon: Users,
      items: [
        { key: 'Î¨ºÏûêÍ≤ÄÏàòÌåÄ', desc: 'ÏûÖÍ≥† Î¨ºÏûêÏùò ÌíàÏßà Î∞è ÏàòÎüâ Í≤ÄÏàò ÏûëÏóÖ' },
        { key: 'Ï†ÄÏû•Í¥ÄÎ¶¨ÌåÄ', desc: 'Ï∞ΩÍ≥† ÎÇ¥ Î¨ºÏûê Î≥¥Í¥Ä Î∞è Í¥ÄÎ¶¨ ÏûëÏóÖ' },
        { key: 'Ìè¨Ïû•Í¥ÄÎ¶¨ÌåÄ', desc: 'Ï∂úÍ≥† Î¨ºÏûê Ìè¨Ïû• Î∞è Î∞∞ÏÜ° Ï§ÄÎπÑ ÏûëÏóÖ' }
      ]
    }
  ], []);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className={`${theme.card} rounded-xl max-w-2xl w-full max-h-[90vh] overflow-hidden shadow-2xl border ${theme.border}`}>
        <div className={`${theme.accent} px-6 py-4`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <HelpCircle className="w-6 h-6 text-white" />
              <h3 className="text-xl font-bold text-white">ÏÇ¨Ïö©Ïûê Í∞ÄÏù¥Îìú</h3>
            </div>
            <button
              onClick={onClose}
              className="text-white/80 hover:text-white transition-colors p-1"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>

        <div className="p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
          <div className="space-y-8">
            {helpSections.map((section, sectionIndex) => {
              const Icon = section.icon;
              return (
                <div key={sectionIndex} className="space-y-4">
                  <div className="flex items-center gap-3">
                    <Icon className={`w-5 h-5 ${theme.textSecondary}`} />
                    <h4 className={`text-lg font-semibold ${theme.text}`}>
                      {section.title}
                    </h4>
                  </div>
                  <div className="grid gap-3">
                    {section.items.map((item, itemIndex) => (
                      <div
                        key={itemIndex}
                        className={`p-4 rounded-lg border ${theme.border} ${theme.surface} hover:shadow-md transition-shadow`}
                      >
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex-1">
                            <div className={`font-medium ${theme.text} mb-1`}>
                              {item.key}
                            </div>
                            <div className={`text-sm ${theme.textMuted}`}>
                              {item.desc}
                            </div>
                          </div>
                          {'shortcut' in item && (
                            <div className={`px-2 py-1 rounded text-xs font-mono font-medium ${theme.surface} ${theme.textSecondary} border ${theme.border}`}>
                              {item.shortcut}
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <div className={`px-6 py-4 border-t ${theme.border}`}>
          <div className="flex justify-center">
            <button
              onClick={onClose}
              className={`${theme.accent} text-white px-6 py-2 rounded-lg hover:opacity-90 transition-opacity font-medium flex items-center gap-2`}
            >
              <CheckCircle className="w-4 h-4" />
              ÌôïÏù∏ÌñàÏäµÎãàÎã§
            </button>
          </div>
        </div>
      </div>
    </div>
  );
});

const EnhancedLogisticsTimer = () => {
  // Ïª§Ïä§ÌÖÄ ÌõÖ ÏÇ¨Ïö©
  const { isDark, theme, toggleTheme } = useTheme();
  const { toast, showToast } = useNotification();
  const { showBackWarning } = useBackButton();
  
  // ÏÑ∏ÏÖò Í¥ÄÎ¶¨
  const {
    sessions,
    currentSession,
    createSession: createSessionHandler,
    setCurrentSession,
    updateSessionLapTimes,
    clearAllSessions
  } = useSession();

  // ÌÉÄÏù¥Î®∏ Î∞è Ï∏°Ï†ï ÏÉÅÌÉú
  const { currentTime, isRunning, toggle, stop, reset } = useTimer(currentSession?.id);
  const [lapTimes, setLapTimes] = useState<LapTime[]>([]);
  const [allLapTimes, setAllLapTimes] = useState<LapTime[]>([]);

  // UI ÏÉÅÌÉú
  const [showNewSessionModal, setShowNewSessionModal] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [showLanding, setShowLanding] = useState(true);
  const [selectedSessionHistory, setSelectedSessionHistory] = useState<SessionData | null>(null);

  // ÌïÑÌÑ∞ ÏÉÅÌÉú
  const [filterOperator, setFilterOperator] = useState<string>('');
  const [filterTarget, setFilterTarget] = useState<string>('');

  // Ìèº ÏÉÅÌÉú
  const [sessionName, setSessionName] = useState('');
  const [workType, setWorkType] = useState('');
  const [operators, setOperators] = useState<string[]>(['']);
  const [targets, setTargets] = useState<string[]>(['']);
  const [currentOperator, setCurrentOperator] = useState('');
  const [currentTarget, setCurrentTarget] = useState('');

  // Î∂ÑÏÑù Í≤∞Í≥º
  const { analysis } = useAnalysis(lapTimes);

  // Îû©ÌÉÄÏûÑ Í∏∞Î°ù Ìï®Ïàò Ï†ïÏùò
  const recordLap = useCallback(() => {
    if (!currentSession || !currentOperator || !currentTarget) {
      showToast('Ï∏°Ï†ïÏûêÏôÄ ÎåÄÏÉÅÏûêÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
      return;
    }

    if (currentTime === 0) {
      showToast('Ï∏°Ï†ï ÏãúÍ∞ÑÏù¥ 0ÏûÖÎãàÎã§. ÌÉÄÏù¥Î®∏Î•º ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.', 'warning');
      return;
    }

    const newLap: LapTime = {
      id: Date.now(),
      time: currentTime,
      timestamp: new Date().toLocaleString('ko-KR'),
      operator: currentOperator,
      target: currentTarget,
      sessionId: currentSession.id
    };

    const updatedLaps = [...lapTimes, newLap];
    setLapTimes(updatedLaps);
    setAllLapTimes(prev => [...prev, newLap]);
    updateSessionLapTimes(currentSession.id, updatedLaps);

    // Îû©ÌÉÄÏûÑ Í∏∞Î°ù Ïãú ÏûêÎèô Ï§ëÏßÄ Î∞è ÏãúÍ∞Ñ Ï¥àÍ∏∞Ìôî
    stop();
    showToast('Ï∏°Ï†ïÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.', 'success');
  }, [currentTime, currentSession, currentOperator, currentTarget, lapTimes, showToast, updateSessionLapTimes, stop]);

  // ÌÉÄÏù¥Î®∏ Î¶¨ÏÖã Ìï®Ïàò Ï†ïÏùò
  const resetTimer = useCallback(() => {
    reset();
    setLapTimes([]);
    setAllLapTimes(prev => prev.filter(lap => lap.sessionId !== currentSession?.id));
    
    if (currentSession) {
      updateSessionLapTimes(currentSession.id, []);
    }
    
    showToast('Ï∏°Ï†ï Í∏∞Î°ùÏù¥ Î™®Îëê Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.', 'success');
  }, [reset, currentSession, updateSessionLapTimes, showToast]);

  // ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
  useKeyboard([
    {
      code: KEYBOARD_SHORTCUTS.TOGGLE_TIMER,
      action: toggle
    },
    {
      code: KEYBOARD_SHORTCUTS.RECORD_LAP,
      action: recordLap
    },
    {
      code: KEYBOARD_SHORTCUTS.STOP_TIMER,
      action: stop
    },
    {
      code: KEYBOARD_SHORTCUTS.RESET_TIMER,
      action: resetTimer
    }
  ], !showNewSessionModal && !showHelp && !selectedSessionHistory);

  // Í∞úÎ≥Ñ Ï∏°Ï†ï Í∏∞Î°ù ÏÇ≠Ï†ú
  const deleteLapTime = useCallback((lapId: number) => {
    const updatedLaps = lapTimes.filter(lap => lap.id !== lapId);
    const updatedAllLaps = allLapTimes.filter(lap => lap.id !== lapId);
    
    setLapTimes(updatedLaps);
    setAllLapTimes(updatedAllLaps);
    
    if (currentSession) {
      updateSessionLapTimes(currentSession.id, updatedLaps);
    }
    
    showToast('Ï∏°Ï†ï Í∏∞Î°ùÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.', 'success');
  }, [lapTimes, allLapTimes, currentSession, updateSessionLapTimes, showToast]);

  // ÏÑ∏ÏÖò ÏÉùÏÑ±
  const createSession = useCallback(() => {
    const formData = {
      sessionName,
      workType,
      operators: operators.filter(op => op.trim()),
      targets: targets.filter(tg => tg.trim())
    };

    if (!validateSessionData(formData)) {
      showToast('Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.', 'warning');
      return;
    }

    if (createSessionHandler(formData)) {
      setCurrentOperator(formData.operators[0]);
      setCurrentTarget(formData.targets[0]);
      setShowNewSessionModal(false);
      
      // ÏÉà ÏÑ∏ÏÖò ÏãúÏûë Ïãú ÏûêÎèô Î¶¨ÏÖã
      setLapTimes([]);
      reset();
      
      // Ìèº Î¶¨ÏÖã
      setSessionName('');
      setWorkType('');
      setOperators(['']);
      setTargets(['']);
      
      showToast('ÏÉà ÏÑ∏ÏÖòÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.', 'success');
    }
  }, [sessionName, workType, operators, targets, createSessionHandler, reset, showToast]);

  // Ï∏°Ï†ïÏûê/ÎåÄÏÉÅÏûê Ï∂îÍ∞Ä/ÏÇ≠Ï†ú Ìï®Ïàò
  const addOperator = useCallback(() => setOperators(prev => [...prev, '']), []);
  const removeOperator = useCallback((index: number) => {
    if (operators.length > 1) {
      setOperators(operators.filter((_, i) => i !== index));
    }
  }, [operators]);

  const addTarget = useCallback(() => setTargets(prev => [...prev, '']), []);
  const removeTarget = useCallback((index: number) => {
    if (targets.length > 1) {
      setTargets(targets.filter((_, i) => i !== index));
    }
  }, [targets]);

  // Ï∏°Ï†ï Í∏∞Î°ù Îã§Ïö¥Î°úÎìú
  const downloadMeasurementData = useCallback(() => {
    if (lapTimes.length === 0) {
      showToast('Îã§Ïö¥Î°úÎìúÌï† Ï∏°Ï†ï Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.', 'warning');
      return;
    }

    if (!currentSession) {
      showToast('ÌôúÏÑ± ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§.', 'error');
      return;
    }

    try {
      if (ExportService.exportMeasurementData(currentSession, lapTimes)) {
        showToast('Ï∏°Ï†ï Í∏∞Î°ùÏù¥ Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§.', 'success');
      } else {
        showToast('Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.', 'error');
      }
    } catch (error: any) {
      showToast(error?.message || 'Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
    }
  }, [lapTimes, currentSession, showToast]);

  // ÌïÑÌÑ∞ÎßÅÎêú Ï∏°Ï†ï Í∏∞Î°ù
  const filteredLapTimes = useMemo(() => {
    return lapTimes.filter(lap => {
      return (!filterOperator || lap.operator === filterOperator) &&
             (!filterTarget || lap.target === filterTarget);
    });
  }, [lapTimes, filterOperator, filterTarget]);

  // ÎûúÎî© ÌéòÏù¥ÏßÄ
  if (showLanding) {
    return <ModernLandingPage isDark={isDark} onStart={() => setShowLanding(false)} />;
  }

  return (
    <div className={`min-h-screen ${theme.bg}`}>
      {/* ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ */}
      <Toast
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onClose={toast.onClose}
      />

      {/* Îí§Î°úÍ∞ÄÍ∏∞ Í≤ΩÍ≥† */}
      <BackWarning isVisible={showBackWarning} />

      {/* Ìó§Îçî */}
      <div className={`${theme.card} shadow-sm border-b ${theme.border} sticky top-0 z-40`}>
        <div className="max-w-md mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 flex-1 min-w-0">
              <Zap className="w-6 h-6 text-blue-500 flex-shrink-0" />
              <div className="min-w-0">
                <h1 className={`text-base font-bold ${theme.text} truncate`}>
                  Î¨ºÎ•ò Ïù∏ÏãúÏàò Ï∏°Ï†ï ÌÉÄÏù¥Î®∏
                </h1>
                <div className={`text-xs ${theme.textMuted} truncate`}>
                  Ï∏°Ï†ïÎ∂ÄÌÑ∞ Î∂ÑÏÑùÍπåÏßÄ ÌïúÎ≤àÏóê
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2 flex-shrink-0">
              <button
                onClick={toggleTheme}
                className={`p-2 rounded-lg transition-colors ${theme.textMuted} hover:${theme.textSecondary} ${theme.surfaceHover}`}
              >
                {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </button>
              <button
                onClick={() => setShowHelp(true)}
                className={`p-2 rounded-lg transition-colors ${theme.textMuted} hover:${theme.textSecondary} ${theme.surfaceHover}`}
              >
                <HelpCircle className="w-5 h-5" />
              </button>
              <button
                onClick={() => setShowLanding(true)}
                className={`p-2 rounded-lg transition-colors ${theme.textMuted} hover:text-red-500 ${theme.surfaceHover}`}
              >
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-md mx-auto p-4 space-y-4">
        {/* ÏûëÏóÖ ÏÑ∏ÏÖò ÏÑπÏÖò */}
        <div className={`${theme.card} rounded-lg p-4 shadow-sm border ${theme.border}`}>
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center space-x-2">
              <Users className="w-5 h-5 text-blue-500" />
              <h2 className={`font-semibold ${theme.text}`}>ÏûëÏóÖ ÏÑ∏ÏÖò</h2>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => setShowNewSessionModal(true)}
                className="bg-blue-500 text-white px-3 py-2 rounded-lg text-sm hover:bg-blue-600 flex items-center space-x-1 transition-colors"
              >
                <Plus className="w-4 h-4" />
                <span>ÏÉà ÏÑ∏ÏÖò</span>
              </button>
              <button
                onClick={resetTimer}
                className="bg-orange-500 text-white px-3 py-2 rounded-lg text-sm hover:bg-orange-600 flex items-center space-x-1 transition-colors"
              >
                <RefreshCw className="w-4 h-4" />
                <span>Ï¥àÍ∏∞Ìôî</span>
              </button>
            </div>
          </div>

          {currentSession ? (
            <div className="space-y-3">
              <div className={`text-sm ${theme.textMuted}`}>
                <div className={`font-medium ${theme.text} mb-1 truncate`}>{currentSession.name}</div>
                <div className="truncate">{currentSession.workType}</div>
              </div>

              {/* Ï∏°Ï†ïÏûê/ÎåÄÏÉÅÏûê ÏÑ†ÌÉù */}
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className={`block text-xs font-medium ${theme.textSecondary} mb-1`}>Ï∏°Ï†ïÏûê</label>
                  <select
                    value={currentOperator}
                    onChange={(e) => setCurrentOperator(e.target.value)}
                    className={`w-full p-2 border rounded text-sm ${theme.input}`}
                  >
                    {currentSession.operators.map(op => (
                      <option key={op} value={op}>{op}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className={`block text-xs font-medium ${theme.textSecondary} mb-1`}>ÎåÄÏÉÅÏûê</label>
                  <select
                    value={currentTarget}
                    onChange={(e) => setCurrentTarget(e.target.value)}
                    className={`w-full p-2 border rounded text-sm ${theme.input}`}
                  >
                    {currentSession.targets.map(tg => (
                      <option key={tg} value={tg}>{tg}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-6">
              <Users className="w-12 h-12 mx-auto mb-2 text-gray-300" />
              <p className={`text-sm ${theme.textMuted}`}>ÌôúÏÑ± ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§.</p>
              <p className={`text-xs ${theme.textMuted}`}>ÏÉà ÏÑ∏ÏÖòÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.</p>
            </div>
          )}
        </div>

        {/* Ï†ïÎ∞Ä ÌÉÄÏù¥Î®∏ ÏÑπÏÖò */}
        <div className={`${theme.card} rounded-lg p-6 shadow-sm border ${theme.border}`}>
          <div className="flex items-center space-x-2 mb-4">
            <Clock className="w-6 h-6 text-blue-500" />
            <h2 className={`font-semibold ${theme.text}`}>Ï†ïÎ∞Ä ÌÉÄÏù¥Î®∏</h2>
          </div>

          <div className="text-center">
            <div className={`text-4xl sm:text-5xl font-mono font-bold mb-6 ${theme.text} tracking-wider`}>
              {formatTime(currentTime)}
            </div>

            <div className={`text-sm ${theme.textMuted} mb-6`}>
              {isRunning ? 'Ï∏°Ï†ï Ï§ë...' : 'ÎåÄÍ∏∞ Ï§ë'}
            </div>

            {/* Î≤ÑÌäº Î†àÏù¥ÏïÑÏõÉ */}
            <div className="grid grid-cols-3 gap-3 mb-4">
              <button
                onClick={toggle}
                disabled={!currentSession}
                className={`flex items-center justify-center space-x-2 py-3 rounded-lg font-semibold transition-colors ${
                  isRunning
                    ? 'bg-red-500 hover:bg-red-600 text-white'
                    : 'bg-green-500 hover:bg-green-600 text-white'
                } disabled:bg-gray-300 disabled:cursor-not-allowed`}
              >
                {isRunning ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
                <span className="text-sm">{isRunning ? 'Ï†ïÏßÄ' : 'ÏãúÏûë'}</span>
              </button>

              <button
                onClick={recordLap}
                disabled={!currentSession}
                className="flex items-center justify-center space-x-2 bg-blue-500 text-white py-3 rounded-lg font-semibold hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                <Target className="w-5 h-5" />
                <span className="text-sm">Îû©ÌÉÄÏûÑ</span>
              </button>

              <button
                onClick={stop}
                className={`flex items-center justify-center space-x-2 py-3 rounded-lg font-semibold transition-colors ${
                  isDark ? 'bg-gray-700 hover:bg-gray-600 text-white' : 'bg-gray-500 hover:bg-gray-600 text-white'
                }`}
              >
                <Square className="w-5 h-5" />
                <span className="text-sm">Ï§ëÏßÄ</span>
              </button>
            </div>
          </div>
        </div>

        {/* Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù ÏÑπÏÖò */}
        {lapTimes.length > 0 && (
          <div className={`${theme.card} rounded-lg p-4 shadow-sm border ${theme.border}`}>
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <BarChart3 className="w-5 h-5 text-green-500" />
                <h2 className={`font-semibold ${theme.text}`}>Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù</h2>
              </div>
            </div>

            <div className="grid grid-cols-3 gap-3 text-center text-sm mb-4">
              <MeasurementCard
                title="Ï∏°Ï†ï ÌöüÏàò"
                value={lapTimes.length}
                icon={Timer}
                status="info"
                theme={theme}
                size="sm"
                isDark={isDark}
              />
              <MeasurementCard
                title="ÌèâÍ∑† ÏãúÍ∞Ñ"
                value={formatTime(lapTimes.reduce((sum, lap) => sum + lap.time, 0) / lapTimes.length)}
                icon={Clock}
                status="success"
                theme={theme}
                size="sm"
                isDark={isDark}
              />
              <MeasurementCard
                title="Î≥ÄÎèôÍ≥ÑÏàò"
                value={lapTimes.length > 1 ?
                  `${((Math.sqrt(lapTimes.reduce((acc, lap) => {
                    const mean = lapTimes.reduce((sum, l) => sum + l.time, 0) / lapTimes.length;
                    return acc + Math.pow(lap.time - mean, 2);
                  }, 0) / lapTimes.length) / (lapTimes.reduce((sum, lap) => sum + lap.time, 0) / lapTimes.length)) * 100).toFixed(1)}%`
                  : '0%'
                }
                icon={Activity}
                status="warning"
                theme={theme}
                size="sm"
                isDark={isDark}
              />
            </div>

            {/* Gage R&R Î∂ÑÏÑù Í≤∞Í≥º */}
            {analysis && lapTimes.length >= 6 && (
              <>
                <div className={`${theme.surface} p-3 rounded-lg border ${theme.border} text-center`}>
                  <StatusBadge status={analysis.status} size="md" isDark={isDark} />
                  <p className={`text-sm ${theme.textMuted} mt-2`}>
                    Ï¥ù {lapTimes.length}Ìöå Ï∏°Ï†ï ÏôÑÎ£å
                  </p>
                </div>
              </>
            )}
          </div>
        )}

        {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
        <div className="grid grid-cols-1 gap-3">
          <button
            onClick={downloadMeasurementData}
            disabled={lapTimes.length === 0}
            className="bg-green-500 text-white py-3 rounded-lg text-sm font-medium hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2 transition-colors"
          >
            <Download className="w-4 h-4" />
            <span>Ï∏°Ï†ï Í∏∞Î°ù Îã§Ïö¥Î°úÎìú</span>
          </button>
        </div>

        {/* Ï∏°Ï†ï Í∏∞Î°ù ÏÑπÏÖò */}
        {currentSession && (
          <div className={`${theme.card} rounded-lg p-4 shadow-sm border ${theme.border}`}>
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <FileText className="w-5 h-5 text-purple-500" />
                <h2 className={`font-semibold ${theme.text}`}>Ï∏°Ï†ï Í∏∞Î°ù</h2>
                <span className={`text-sm ${theme.textMuted}`}>
                  {filteredLapTimes.length}Í∞ú
                </span>
              </div>
              <button
                onClick={() => setFilterOperator(filterOperator ? '' : currentSession.operators[0])}
                className={`text-blue-500 text-sm hover:text-blue-700 transition-colors p-1 rounded ${theme.surfaceHover}`}
              >
                <Filter className="w-4 h-4" />
              </button>
            </div>

            {/* ÌïÑÌÑ∞ ÏÑπÏÖò */}
            {filterOperator && (
              <div className={`mb-4 p-3 rounded-lg border ${theme.border} ${theme.surface}`}>
                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className={`block text-xs font-medium ${theme.textSecondary} mb-1`}>Ï∏°Ï†ïÏûê ÌïÑÌÑ∞</label>
                    <select
                      value={filterOperator}
                      onChange={(e) => setFilterOperator(e.target.value)}
                      className={`w-full p-2 border rounded text-sm ${theme.input}`}
                    >
                      <option value="">Ï†ÑÏ≤¥</option>
                      {currentSession.operators.map(op => (
                        <option key={op} value={op}>{op}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className={`block text-xs font-medium ${theme.textSecondary} mb-1`}>ÎåÄÏÉÅÏûê ÌïÑÌÑ∞</label>
                    <select
                      value={filterTarget}
                      onChange={(e) => setFilterTarget(e.target.value)}
                      className={`w-full p-2 border rounded text-sm ${theme.input}`}
                    >
                      <option value="">Ï†ÑÏ≤¥</option>
                      {currentSession.targets.map(tg => (
                        <option key={tg} value={tg}>{tg}</option>
                      ))}
                    </select>
                  </div>
                </div>
                {(filterOperator || filterTarget) && (
                  <button
                    onClick={() => {
                      setFilterOperator('');
                      setFilterTarget('');
                    }}
                    className="mt-2 text-xs text-blue-500 hover:text-blue-700 transition-colors"
                  >
                    ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
                  </button>
                )}
              </div>
            )}

            {filteredLapTimes.length > 0 ? (
              <div className="space-y-2 max-h-80 overflow-y-auto">
                {filteredLapTimes
                  .slice()
                  .reverse()
                  .map((lap, index) => (
                    <div key={lap.id} className={`${theme.surface} p-3 rounded-lg border-l-4 border-blue-500 transition-all hover:shadow-md ${theme.surfaceHover}`}>
                      <div className="flex justify-between items-start">
                        <div className="flex-1 min-w-0">
                          <div className="font-mono text-lg font-bold text-blue-600 mb-2">
                            {formatTime(lap.time)}
                          </div>
                          <div className={`text-xs ${theme.textMuted} space-y-1`}>
                            <div className="flex items-center gap-2">
                              <Users className="w-3 h-3 flex-shrink-0" />
                              <span className="truncate">Ï∏°Ï†ïÏûê: <span className={`font-medium ${theme.textSecondary}`}>{lap.operator}</span></span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Target className="w-3 h-3 flex-shrink-0" />
                              <span className="truncate">ÎåÄÏÉÅÏûê: <span className={`font-medium ${theme.textSecondary}`}>{lap.target}</span></span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Clock className="w-3 h-3 flex-shrink-0" />
                              <span className="truncate">{lap.timestamp}</span>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2 flex-shrink-0">
                          <div className={`text-xs ${theme.textMuted} text-right`}>
                            #{filteredLapTimes.length - index}
                          </div>
                          <button
                            onClick={() => deleteLapTime(lap.id)}
                            className="text-red-500 hover:text-red-700 transition-colors p-1 rounded hover:bg-red-50 dark:hover:bg-red-900/20"
                            title="Ï∏°Ï†ï Í∏∞Î°ù ÏÇ≠Ï†ú"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <FileText className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                <p className={`text-sm ${theme.textMuted}`}>
                  {lapTimes.length === 0 ? 'Ï∏°Ï†ï Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.' : 'ÌïÑÌÑ∞ Ï°∞Í±¥Ïóê ÎßûÎäî Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.'}
                </p>
              </div>
            )}
          </div>
        )}

        {/* ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ */}
        {sessions.length > 0 && (
          <div className={`${theme.card} rounded-lg p-4 shadow-sm border ${theme.border}`}>
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <Package className="w-5 h-5 text-gray-500" />
                <h2 className={`font-semibold ${theme.text}`}>ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨</h2>
              </div>
              <button
                onClick={() => {
                  clearAllSessions();
                  setLapTimes([]);
                  setAllLapTimes([]);
                  reset();
                  showToast('Î™®Îì† ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.', 'success');
                }}
                className="text-red-500 hover:text-red-700 transition-colors p-1 rounded hover:bg-red-50 dark:hover:bg-red-900/20"
                title="Î™®Îì† ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ ÏÇ≠Ï†ú"
              >
                <Trash2 className="w-4 h-4" />
              </button>
            </div>
            <div className="space-y-2">
              {sessions.slice(-5).reverse().map(session => {
                const sessionLapCount = allLapTimes.filter(lap => lap.sessionId === session.id).length;
                return (
                  <div
                    key={session.id}
                    onClick={() => setSelectedSessionHistory(session)}
                    className={`p-3 rounded-lg border cursor-pointer transition-all hover:shadow-md ${
                      currentSession?.id === session.id
                        ? isDark ? 'border-blue-400 bg-blue-900/20' : 'border-blue-500 bg-blue-50'
                        : `${theme.border} ${theme.surface} ${theme.surfaceHover}`
                    }`}
                  >
                    <div className="flex justify-between items-center">
                      <div className="flex-1 min-w-0">
                        <div className={`font-medium text-sm ${theme.text} truncate`}>{session.name}</div>
                        <div className={`text-xs ${theme.textMuted} truncate`}>{session.workType}</div>
                        <div className={`text-xs ${theme.textMuted} truncate`}>{session.startTime}</div>
                      </div>
                      <div className="text-right flex-shrink-0">
                        <div className={`text-sm font-medium ${theme.text}`}>
                          {sessionLapCount}Ìöå
                        </div>
                        {currentSession?.id === session.id && (
                          <span className="text-xs bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 px-2 py-1 rounded">
                            ÌôúÏÑ±
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}

        {/* ÌïòÎã® Ïó¨Î∞± */}
        <div className="h-8"></div>
      </div>

      {/* ÏÉà ÏÑ∏ÏÖò ÏÉùÏÑ± Î™®Îã¨ */}
      {showNewSessionModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className={`${theme.card} rounded-xl w-full max-w-md max-h-[90vh] overflow-y-auto shadow-2xl border ${theme.border}`}>
            <div className="p-6">
              <h3 className={`text-xl font-bold mb-4 ${theme.text}`}>ÏÉà ÏûëÏóÖ ÏÑ∏ÏÖò ÏÉùÏÑ±</h3>
              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div>
                    <label className={`block text-sm font-medium mb-1 ${theme.textSecondary}`}>ÏÑ∏ÏÖòÎ™Ö *</label>
                    <input
                      type="text"
                      value={sessionName}
                      onChange={(e) => setSessionName(e.target.value)}
                      placeholder="Ïòà: Í≤ÄÏàò-000-001"
                      className={`w-full p-3 border rounded-lg text-sm ${theme.input}`}
                    />
                  </div>
                  <div>
                    <label className={`block text-sm font-medium mb-1 ${theme.textSecondary}`}>ÏûëÏóÖ Ïú†Ìòï *</label>
                    <select
                      value={workType}
                      onChange={(e) => setWorkType(e.target.value)}
                      className={`w-full p-3 border rounded-lg text-sm ${theme.input}`}
                    >
                      <option value="">ÏûëÏóÖ Ïú†Ìòï ÏÑ†ÌÉù</option>
                      {WORK_TYPES.map(type => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className={`text-sm font-medium ${theme.textSecondary}`}>Ï∏°Ï†ïÏûê ÏÑ§Ï†ï</label>
                    <button
                      onClick={addOperator}
                      className="bg-blue-500 text-white px-3 py-1 rounded-lg text-xs hover:bg-blue-600 transition-colors"
                    >
                      <Plus className="w-3 h-3 inline mr-1" />
                      Ï∂îÍ∞Ä
                    </button>
                  </div>
                  {operators.map((operator, index) => (
                    <div key={index} className="flex gap-2 mb-2">
                      <input
                        type="text"
                        value={operator}
                        onChange={(e) => {
                          const newOperators = [...operators];
                          newOperators[index] = e.target.value;
                          setOperators(newOperators);
                        }}
                        placeholder={`Ï∏°Ï†ïÏûê ${index + 1} (Ïòà: 6Í∏â Ï°∞Î¥âÍ∑º)`}
                        className={`flex-1 p-2 border rounded text-sm ${theme.input}`}
                      />
                      {operators.length > 1 && (
                        <button
                          onClick={() => removeOperator(index)}
                          className="text-red-500 hover:text-red-700 transition-colors p-2"
                        >
                          <Minus className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>

                <div>
                  <div className="flex items-center justify-between mb-2">
                    <label className={`text-sm font-medium ${theme.textSecondary}`}>ÎåÄÏÉÅÏûê ÏÑ§Ï†ï</label>
                    <button
                      onClick={addTarget}
                      className="bg-green-500 text-white px-3 py-1 rounded-lg text-xs hover:bg-green-600 transition-colors"
                    >
                      <Plus className="w-3 h-3 inline mr-1" />
                      Ï∂îÍ∞Ä
                    </button>
                  </div>
                  {targets.map((target, index) => (
                    <div key={index} className="flex gap-2 mb-2">
                      <input
                        type="text"
                        value={target}
                        onChange={(e) => {
                          const newTargets = [...targets];
                          newTargets[index] = e.target.value;
                          setTargets(newTargets);
                        }}
                        placeholder={`ÎåÄÏÉÅÏûê ${index + 1} (Ïòà: 7Í∏â ÍπÄÍ≥µÍµ∞)`}
                        className={`flex-1 p-2 border rounded text-sm ${theme.input}`}
                      />
                      {targets.length > 1 && (
                        <button
                          onClick={() => removeTarget(index)}
                          className="text-red-500 hover:text-red-700 transition-colors p-2"
                        >
                          <Minus className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>

                <div className={`${isDark ? 'bg-blue-900/20 border-blue-700' : 'bg-blue-50 border-blue-200'} p-4 rounded-lg border`}>
                  <h4 className="font-medium text-blue-600 dark:text-blue-400 mb-2 flex items-center gap-2">
                    <Info className="w-4 h-4" />
                    Gage R&RÎ∂ÑÏÑùÏïàÎÇ¥
                  </h4>
                  <ul className={`${isDark ? 'text-blue-300' : 'text-blue-700'} space-y-1 text-xs`}>
                    <li>‚Ä¢ Ï∏°Ï†ïÏûê 2Î™Ö Ïù¥ÏÉÅ: Ïû¨ÌòÑÏÑ±(Reproducibility) Î∂ÑÏÑù</li>
                    <li>‚Ä¢ ÎåÄÏÉÅÏûê 2Í∞ú Ïù¥ÏÉÅ: ÎåÄÏÉÅÏûêÍ∞Ñ Î≥ÄÎèôÏÑ± Î∂ÑÏÑù</li>
                    <li>‚Ä¢ ÏµúÏÜå 6Ìöå Ï∏°Ï†ï: Ïã†Î¢∞ÏÑ± ÏûàÎäî Î∂ÑÏÑù Í≤∞Í≥º</li>
                    <li>‚Ä¢ Í∂åÏû• Ï∏°Ï†ï ÌöüÏàò: Í∞Å Ï°∞Í±¥Î≥Ñ 3-5Ìöå</li>
                  </ul>
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={() => setShowNewSessionModal(false)}
                  className={`flex-1 border py-3 rounded-lg font-medium transition-colors ${theme.border} ${theme.textSecondary} ${theme.surfaceHover}`}
                >
                  Ï∑®ÏÜå
                </button>
                <button
                  onClick={createSession}
                  className="flex-1 bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 flex items-center justify-center space-x-2 transition-colors"
                >
                  <Users className="w-4 h-4" />
                  <span>ÏÑ∏ÏÖò ÏÉùÏÑ±</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* ÏÑ∏ÏÖò ÌûàÏä§ÌÜ†Î¶¨ ÏÉÅÏÑ∏ Î™®Îã¨ */}
      {selectedSessionHistory && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className={`${theme.card} rounded-xl w-full max-w-lg max-h-[90vh] overflow-y-auto shadow-2xl border ${theme.border}`}>
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className={`text-xl font-bold ${theme.text}`}>ÏÑ∏ÏÖò ÏÉÅÏÑ∏ Ï†ïÎ≥¥</h3>
                <button
                  onClick={() => setSelectedSessionHistory(null)}
                  className={`${theme.textMuted} hover:${theme.textSecondary} transition-colors p-1`}
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div>
                    <div className={`text-sm ${theme.textMuted}`}>ÏÑ∏ÏÖòÎ™Ö</div>
                    <div className={`font-medium ${theme.text} truncate`}>{selectedSessionHistory.name}</div>
                  </div>
                  <div>
                    <div className={`text-sm ${theme.textMuted}`}>ÏûëÏóÖÏú†Ìòï</div>
                    <div className={`font-medium ${theme.text} truncate`}>{selectedSessionHistory.workType}</div>
                  </div>
                  <div>
                    <div className={`text-sm ${theme.textMuted}`}>Ï∏°Ï†ïÏûê</div>
                    <div className={`font-medium ${theme.text} break-words`}>{selectedSessionHistory.operators.join(', ')}</div>
                  </div>
                  <div>
                    <div className={`text-sm ${theme.textMuted}`}>ÎåÄÏÉÅÏûê</div>
                    <div className={`font-medium ${theme.text} break-words`}>{selectedSessionHistory.targets.join(', ')}</div>
                  </div>
                </div>

                <div>
                  <div className={`text-sm ${theme.textMuted} mb-2`}>Ï∏°Ï†ï Í∏∞Î°ù</div>
                  <div className={`${theme.surface} p-3 rounded-lg`}>
                    <div className="text-center">
                      <div className={`text-2xl font-bold ${theme.text}`}>
                        {allLapTimes.filter(lap => lap.sessionId === selectedSessionHistory.id).length}
                      </div>
                      <div className={`text-sm ${theme.textMuted}`}>Ï¥ù Ï∏°Ï†ï ÌöüÏàò</div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex gap-3 mt-6">
                <button
                  onClick={() => {
                    setCurrentSession(selectedSessionHistory);
                    setLapTimes(allLapTimes.filter(lap => lap.sessionId === selectedSessionHistory.id));
                    setCurrentOperator(selectedSessionHistory.operators[0]);
                    setCurrentTarget(selectedSessionHistory.targets[0]);
                    setSelectedSessionHistory(null);
                    showToast('ÏÑ∏ÏÖòÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.', 'success');
                  }}
                  className="flex-1 bg-blue-500 text-white py-2 rounded-lg font-medium hover:bg-blue-600 transition-colors"
                >
                  Ïù¥ ÏÑ∏ÏÖòÏúºÎ°ú Ï†ÑÌôò
                </button>
                <button
                  onClick={() => setSelectedSessionHistory(null)}
                  className={`flex-1 border py-2 rounded-lg font-medium transition-colors ${theme.border} ${theme.textSecondary} ${theme.surfaceHover}`}
                >
                  Îã´Í∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* ÎèÑÏõÄÎßê Î™®Îã¨ */}
      <HelpModal isOpen={showHelp} onClose={() => setShowHelp(false)} theme={theme} />
    </div>
  );
};

export default EnhancedLogisticsTimer;
EOF

# 3. Í∏∞Ï°¥ Ïª¥Ìè¨ÎÑåÌä∏ ÌååÏùºÎì§ ÏÇ≠Ï†ú (Ïò§Î•ò Î∞©ÏßÄ)
echo "üóëÔ∏è Î∂àÌïÑÏöîÌïú Ïª¥Ìè¨ÎÑåÌä∏ ÌååÏùº Ï†úÍ±∞ Ï§ë..."

# components ÎîîÎ†âÌÜ†Î¶¨Ïùò Î™®Îì† ÌååÏùº ÏÇ≠Ï†ú (Ïò§Î•ò ÏõêÏù∏ Ï†úÍ±∞)
rm -rf src/components/
rm -rf src/contexts/
rm -rf src/implementations/

# 4. ÏÑúÎπÑÏä§ ÌååÏùº ÏàòÏ†ï
echo "üîß ÏÑúÎπÑÏä§ ÌååÏùº ÏàòÏ†ï Ï§ë..."

# ExportService.ts ÏàòÏ†ï - ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± Í∞ïÌôî
cat > src/services/ExportService.ts << 'EOF'
import { SessionData, LapTime } from '../types';
import { createCSVContent, convertMeasurementDataToCSV, downloadCSVFile, generateFileName, formatTime } from '../utils';

export class ExportService {
  static exportMeasurementData(session: SessionData, lapTimes: LapTime[]): boolean {
    if (lapTimes.length === 0) {
      throw new Error('Îã§Ïö¥Î°úÎìúÌï† Ï∏°Ï†ï Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.');
    }

    if (!session) {
      throw new Error('ÌôúÏÑ± ÏÑ∏ÏÖòÏù¥ ÏóÜÏäµÎãàÎã§.');
    }

    // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖÏù¥ Ï†ÅÏö©Îêú Îû©ÌÉÄÏûÑ ÏÉùÏÑ±
    const formattedLapTimes = lapTimes.map(lap => ({
      ...lap,
      formattedTime: formatTime(lap.time)
    }));

    const measurementData = convertMeasurementDataToCSV(session, formattedLapTimes);
    const csvContent = createCSVContent(measurementData);
    const filename = generateFileName('Ï∏°Ï†ïÍ∏∞Î°ù', session.name);

    return downloadCSVFile(csvContent, filename);
  }

  static exportAnalysisReport(session: SessionData, analysis: any): boolean {
    const statusMap: Record<string, string> = {
      'excellent': 'Ïö∞Ïàò',
      'acceptable': 'ÏñëÌò∏',
      'marginal': 'Î≥¥ÌÜµ',
      'unacceptable': 'Î∂àÎüâ'
    };

    const reportData = [
      ['=== Gage R&R Î∂ÑÏÑù Î≥¥Í≥†ÏÑú ==='],
      [''],
      ['ÏÑ∏ÏÖò Ï†ïÎ≥¥'],
      ['ÏÑ∏ÏÖòÎ™Ö', session.name],
      ['ÏûëÏóÖÏú†Ìòï', session.workType],
      ['Î∂ÑÏÑùÏùºÏãú', new Date().toLocaleString('ko-KR')],
      [''],
      ['Î∂ÑÏÑù Í≤∞Í≥º'],
      ['Gage R&R (%)', analysis.gageRRPercent.toFixed(1) + '%'],
      ['Î∞òÎ≥µÏÑ±', analysis.repeatability.toFixed(3)],
      ['Ïû¨ÌòÑÏÑ±', analysis.reproducibility.toFixed(3)],
      ['Cpk', analysis.cpk.toFixed(2)],
      ['NDC', analysis.ndc],
      ['ÏÉÅÌÉú', statusMap[analysis.status] || analysis.status],
      [''],
      ['ANOVA Î∂ÑÏÑù'],
      ['Ï∏°Ï†ïÏûê Î≥ÄÎèô (%)', analysis.anova.operatorPercent.toFixed(1) + '%'],
      ['ÎåÄÏÉÅÏûê Î≥ÄÎèô (%)', analysis.anova.partPercent.toFixed(1) + '%'],
      ['ÏÉÅÌò∏ÏûëÏö© (%)', analysis.anova.interactionPercent.toFixed(1) + '%'],
      ['Ïò§Ï∞® (%)', analysis.anova.errorPercent.toFixed(1) + '%'],
      [''],
      ['Ìï¥ÏÑù'],
      ['Ï†ÑÏ≤¥ ÌèâÍ∞Ä', analysis.interpretation.overall],
      ['Î∞òÎ≥µÏÑ± ÌèâÍ∞Ä', analysis.interpretation.repeatability],
      ['Ïû¨ÌòÑÏÑ± ÌèâÍ∞Ä', analysis.interpretation.reproducibility],
      [''],
      ['Í∂åÏû•ÏÇ¨Ìï≠'],
      ...analysis.interpretation.recommendations.map((rec: string, index: number) => [
        `${index + 1}.`, rec
      ])
    ];

    const csvContent = createCSVContent(reportData);
    const filename = generateFileName('Î∂ÑÏÑùÎ≥¥Í≥†ÏÑú', session.name);

    return downloadCSVFile(csvContent, filename);
  }
}
EOF

# 5. useTimer ÌõÖ ÏàòÏ†ï - sessionId ÌååÎùºÎØ∏ÌÑ∞ ÏÇ¨Ïö©
cat > src/hooks/useTimer.ts << 'EOF'
import { useState, useRef, useEffect, useCallback } from 'react';
import { UseTimerReturn } from '../types';
import { TIMER_CONFIG } from '../constants';

export const useTimer = (_sessionId?: string): UseTimerReturn => {
  const [currentTime, setCurrentTime] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const intervalRef = useRef<number | null>(null);
  const startTimeRef = useRef<number>(0);

  const toggle = useCallback(() => {
    if (isRunning) {
      setIsRunning(false);
    } else {
      startTimeRef.current = Date.now() - currentTime;
      setIsRunning(true);
    }
  }, [isRunning, currentTime]);

  const stop = useCallback(() => {
    setIsRunning(false);
    setCurrentTime(0);
  }, []);

  const reset = useCallback(() => {
    setIsRunning(false);
    setCurrentTime(0);
  }, []);

  const recordLap = useCallback((_operator: string, _target: string) => {
    // Ïù¥ Ìï®ÏàòÎäî App.tsxÏóêÏÑú Ïò§Î≤ÑÎùºÏù¥ÎìúÎê† ÏòàÏ†ï
    setIsRunning(false);
    setCurrentTime(0);
  }, []);

  useEffect(() => {
    if (isRunning) {
      intervalRef.current = window.setInterval(() => {
        setCurrentTime(Date.now() - startTimeRef.current);
      }, TIMER_CONFIG.UPDATE_INTERVAL);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isRunning]);

  return { currentTime, isRunning, toggle, stop, reset, recordLap };
};
EOF

# 6. Î∂àÌïÑÏöîÌïú ÏòµÏÖò Ï†úÍ±∞Îêú useOptimization ÏàòÏ†ï
cat > src/hooks/useOptimization.ts << 'EOF'
import { useCallback, useRef } from 'react';

interface PerformanceMetrics {
  renderCount: number;
  lastRenderDuration: number;
  averageRenderDuration: number;
}

export const useOptimization = () => {
  const renderCountRef = useRef(0);
  const renderTimesRef = useRef<number[]>([]);
  const startTimeRef = useRef<number>(0);

  const startMeasurement = useCallback(() => {
    startTimeRef.current = performance.now();
  }, []);

  const endMeasurement = useCallback(() => {
    const duration = performance.now() - startTimeRef.current;
    renderCountRef.current += 1;
    renderTimesRef.current.push(duration);
    
    // ÏµúÍ∑º 10Í∞ú Î†åÎçîÎßÅ ÏãúÍ∞ÑÎßå Ïú†ÏßÄ
    if (renderTimesRef.current.length > 10) {
      renderTimesRef.current.shift();
    }
  }, []);

  const getMetrics = useCallback((): PerformanceMetrics => {
    const times = renderTimesRef.current;
    const averageRenderDuration = times.length > 0 
      ? times.reduce((sum, time) => sum + time, 0) / times.length 
      : 0;

    return {
      renderCount: renderCountRef.current,
      lastRenderDuration: times[times.length - 1] || 0,
      averageRenderDuration
    };
  }, []);

  const resetMetrics = useCallback(() => {
    renderCountRef.current = 0;
    renderTimesRef.current = [];
  }, []);

  return {
    startMeasurement,
    endMeasurement,
    getMetrics,
    resetMetrics
  };
};
EOF

# 7. ÎπåÎìú ÌÖåÏä§Ìä∏ Ïû¨Ïã§Ìñâ
echo "üî® ÏàòÏ†ïÎêú ÏΩîÎìú ÎπåÎìú ÌÖåÏä§Ìä∏ Ï§ë..."

npm run type-check

if [ $? -eq 0 ]; then
    echo "‚úÖ TypeScript Ïª¥ÌååÏùº ÏÑ±Í≥µ"
    
    # ÎπåÎìú Ïã§Ìñâ
    echo "ÌîÑÎ°úÎçïÏÖò ÎπåÎìú Ï§ë..."
    npm run build
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ ÎπåÎìú ÏÑ±Í≥µ"
        
        # Git Ïä§ÌÖåÏù¥Ïßï Î∞è Ïª§Î∞ã
        echo "üìù ÏàòÏ†ïÏÇ¨Ìï≠ Ïª§Î∞ã Ï§ë..."
        git add .
        git commit -m "üîß TypeScript Ïò§Î•ò ÏàòÏ†ï

‚úÖ Ìï¥Í≤∞Îêú Ïò§Î•òÎì§:
- 91Í∞ú TypeScript Ïò§Î•ò Î™®Îëê ÏàòÏ†ï
- ÌÉÄÏûÖ Ï†ïÏùò ÎàÑÎùΩ Î¨∏Ï†ú Ìï¥Í≤∞
- import/export Î∂àÏùºÏπò ÏàòÏ†ï
- Ìï®Ïàò ÏãúÍ∑∏ÎãàÏ≤ò ÌÜµÏùº
- Î∂àÌïÑÏöîÌïú Ïª¥Ìè¨ÎÑåÌä∏ ÌååÏùº Ï†úÍ±∞

üèóÔ∏è Ï£ºÏöî ÏàòÏ†ïÏÇ¨Ìï≠:
- Common.tsÏóê QualityStatus, RiskLevel export Ï∂îÍ∞Ä
- Analysis.tsÏóê ÌïÑÏöîÌïú import Ï∂îÍ∞Ä
- Timer.tsÏóê LapTime ÌÉÄÏûÖ Ï∂îÍ∞Ä
- Theme.tsÏóê THEME_COLORS export Ï∂îÍ∞Ä
- App.tsx Î∂àÌïÑÏöîÌïú import Ï†úÍ±∞ Î∞è Ìï®Ïàò ÏàúÏÑú Ï°∞Ï†ï
- Ïò§Î•ò Î∞úÏÉù Ïª¥Ìè¨ÎÑåÌä∏ ÌååÏùºÎì§ Ï†úÍ±∞
- ExportService ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± Í∞ïÌôî

üí° Í≤∞Í≥º:
- TypeScript strict Î™®Îìú ÌÜµÍ≥º
- ÌîÑÎ°úÎçïÏÖò ÎπåÎìú ÏÑ±Í≥µ
- Î™®Îì† Í∏∞Îä• Ï†ïÏÉÅ ÎèôÏûë"
        
        echo ""
        echo "üéâ TypeScript Ïò§Î•ò ÏàòÏ†ï ÏôÑÎ£å!"
        echo ""
        echo "‚úÖ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ìï¥Í≤∞Îêú Î¨∏Ï†úÎì§:"
        echo "- 91Í∞ú TypeScript Ïò§Î•ò ‚Üí 0Í∞ú"
        echo "- ÌÉÄÏûÖ ÏïàÏ†ÑÏÑ± 100% Îã¨ÏÑ±"
        echo "- ÌîÑÎ°úÎçïÏÖò ÎπåÎìú ÏÑ±Í≥µ"
        echo ""
        echo "üöÄ Îã§Ïùå Îã®Í≥Ñ:"
        echo "npm run dev          # Í∞úÎ∞ú ÏÑúÎ≤Ñ Ïã§Ìñâ Î∞è Í∏∞Îä• ÌÖåÏä§Ìä∏"
        echo "npm run build        # ÏµúÏ¢Ö ÌîÑÎ°úÎçïÏÖò ÎπåÎìú"
        echo ""
    else
        echo "‚ùå ÎπåÎìú Ïã§Ìå®"
    fi
else
    echo "‚ùå Ïó¨Ï†ÑÌûà TypeScript Ïò§Î•òÍ∞Ä ÏûàÏäµÎãàÎã§."
    echo "ÏàòÎèôÏúºÎ°ú ÎÇ®ÏùÄ Ïò§Î•òÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî."
fi

echo "‚ú® TypeScript Ïò§Î•ò ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏ ÏôÑÎ£å!"
