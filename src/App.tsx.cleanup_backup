import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import {
  Play, Sun, Moon, LogOut, Zap, 
  AlertTriangle, HelpCircle, X, Info, CheckCircle,
  AlertCircle, XCircle, PieChart, Download
} from 'lucide-react';

// 타입 및 서비스 imports (실제 사용되는 것만)
import { LapTime, SessionData, ToastProps, FilterOptions } from './types';
import { ValidationService } from './services/ValidationService';
import { AnalysisService } from './services/AnalysisService';
import { ExportService } from './services/ExportService';

// 페이지 imports
import { DetailedAnalysisPage } from './pages/DetailedAnalysisPage';

// 컴포넌트 imports
import { HelpModal } from './components/Help/HelpModal';

// 훅 imports
import { useDataSynchronization } from './hooks/useDataSynchronization';

// ==================== 상수 정의 ====================
const THEME_COLORS = {
  light: {
    bg: 'bg-gray-50', card: 'bg-white', text: 'text-gray-900',
    textSecondary: 'text-gray-700', textMuted: 'text-gray-500',
    border: 'border-gray-200', surface: 'bg-gray-50',
    surfaceHover: 'hover:bg-gray-100'
  },
  dark: {
    bg: 'bg-gray-900', card: 'bg-gray-800', text: 'text-white',
    textSecondary: 'text-gray-200', textMuted: 'text-gray-400',
    border: 'border-gray-600', surface: 'bg-gray-700',
    surfaceHover: 'hover:bg-gray-600'
  }
} as const;

// ==================== 커스텀 훅들 (SOLID 원칙) ====================

// 뒤로가기 방지 훅 (Single Responsibility)
const useBackButtonPrevention = () => {
  const [backPressCount, setBackPressCount] = useState(0);
  const [showBackWarning, setShowBackWarning] = useState(false);

  useEffect(() => {
    const handlePopState = (event: PopStateEvent) => {
      event.preventDefault();
      if (backPressCount === 0) {
        setBackPressCount(1);
        setShowBackWarning(true);
        window.history.pushState(null, '', window.location.href);
        setTimeout(() => {
          setBackPressCount(0);
          setShowBackWarning(false);
        }, 2000);
      } else {
        window.history.back();
      }
    };

    window.history.pushState(null, '', window.location.href);
    window.addEventListener('popstate', handlePopState);
    return () => window.removeEventListener('popstate', handlePopState);
  }, [backPressCount]);

  return { showBackWarning };
};

// ==================== UI 컴포넌트들 (기존 기능 보존) ====================

// 토스트 컴포넌트 (기존과 동일)
const ToastComponent = React.memo<ToastProps>(({ message, type, isVisible, onClose }) => {
  useEffect(() => {
    if (isVisible) {
      const timer = setTimeout(onClose, 3000);
      return () => clearTimeout(timer);
    }
  }, [isVisible, onClose]);

  if (!isVisible) return null;

  const typeConfig = {
    success: { style: 'bg-green-500 text-white', icon: CheckCircle },
    error: { style: 'bg-red-500 text-white', icon: XCircle },
    warning: { style: 'bg-yellow-500 text-white', icon: AlertCircle },
    info: { style: 'bg-blue-500 text-white', icon: Info }
  };

  const { style, icon: Icon } = typeConfig[type];

  return (
    <div className="fixed top-4 right-4 z-[60] animate-in slide-in-from-right duration-300">
      <div className={`${style} px-4 py-3 rounded-lg shadow-lg flex items-center gap-2 max-w-sm`}>
        <Icon className="w-5 h-5 flex-shrink-0" />
        <span className="text-sm font-medium">{message}</span>
        <button onClick={onClose} className="ml-2 hover:bg-white/20 rounded p-1">
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
});

// 뒤로가기 경고 컴포넌트 (기존과 동일)
const BackWarning = React.memo<{ isVisible: boolean }>(({ isVisible }) => {
  if (!isVisible) return null;

  return (
    <div className="fixed bottom-4 left-4 right-4 z-[70] animate-in slide-in-from-bottom duration-300">
      <div className="bg-yellow-500 text-white px-4 py-3 rounded-lg shadow-lg flex items-center gap-2">
        <AlertTriangle className="w-5 h-5 flex-shrink-0" />
        <span className="text-sm font-medium">한 번 더 뒤로가기 하면 종료됩니다</span>
      </div>
    </div>
  );
});

// 랜딩 페이지 컴포넌트 (기존 보존)
const ModernLandingPage = React.memo<{
  onStart: () => void;
}>(({ onStart }) => {
  return (
    <div className="min-h-screen relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900">
      {/* 배경 효과는 기존과 동일하게 유지 */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 right-20 w-96 h-96 bg-gradient-to-br from-blue-400/20 via-purple-500/15 to-transparent rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-32 left-16 w-80 h-80 bg-gradient-to-tr from-indigo-400/15 via-blue-500/10 to-transparent rounded-full blur-3xl"></div>
      </div>

      <div className="relative z-10 flex flex-col items-center justify-start min-h-screen px-6 text-center pt-20">
        {/* 로고 및 타이틀 섹션 (기존과 동일) */}
        <div className="mb-20 space-y-6">
          <h2 className="text-4xl font-bold text-white leading-tight tracking-tight">
            물류 작업현장<br/>
            인시수 측정 타이머
          </h2>
          <div className="inline-flex items-center px-6 py-3 rounded-full bg-gradient-to-r from-white/10 to-white/5 backdrop-blur-md border border-white/20 shadow-2xl">
            <div className="w-2 h-2 bg-green-400 rounded-full mr-3 animate-pulse"></div>
            <span className="text-blue-100 text-sm font-medium tracking-wide">
              측정, 기록, 저장, 분석을 동시에
            </span>
          </div>
        </div>

        {/* 시작 버튼 (기존과 동일) */}
        <button
          onClick={onStart}
          className="group relative overflow-hidden px-12 py-5 rounded-2xl font-bold text-xl shadow-2xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-2"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-white via-blue-50 to-white rounded-2xl"></div>
          <div className="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          <span className="relative z-10 group-hover:text-white transition-colors duration-300 flex items-center space-x-3 text-slate-800">
            <div className="w-6 h-6 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center group-hover:bg-white/20 transition-all duration-300">
              <Play className="w-4 h-4 text-white"/>
            </div>
            <span>시스템 시작</span>
          </span>
        </button>
      </div>
    </div>
  );
});

// ==================== 메인 애플리케이션 ====================
const EnhancedLogisticsTimer = () => {
  // ============ 기본 상태 관리 (기존 보존) ============
  const [isDark, setIsDark] = useState(true);
  const [currentTime, setCurrentTime] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [lapTimes, setLapTimes] = useState<LapTime[]>([]);
  const [allLapTimes, setAllLapTimes] = useState<LapTime[]>([]);
  const [sessions, setSessions] = useState<SessionData[]>([]);
  const [currentSession, setCurrentSession] = useState<SessionData | null>(null);

  // ============ UI 상태 관리 (기존 보존) ============
  const [showLanding, setShowLanding] = useState(true);
  const [showDetailedAnalysis, setShowDetailedAnalysis] = useState(false);
  const [showHelp, setShowHelp] = useState(false);

  // ============ 토스트 상태 (기존 보존) ============
  const [toast, setToast] = useState<{
    message: string;
    type: 'success' | 'error' | 'warning' | 'info';
    isVisible: boolean;
  }>({
    message: '',
    type: 'info',
    isVisible: false
  });

  // ============ 폼 상태 (기존 보존) ============
  const [currentOperator, setCurrentOperator] = useState('');
  const [currentTarget, setCurrentTarget] = useState('');

  // ============ 참조 및 훅 ============
  const intervalRef = useRef<number | null>(null);
  const startTimeRef = useRef<number>(0);
  const { showBackWarning } = useBackButtonPrevention();
  const { incrementVersion, validateDataIntegrity } = useDataSynchronization();

  // ============ 테마 정의 (기존 보존) ============
  const theme = useMemo(() => THEME_COLORS[isDark ? 'dark' : 'light'], [isDark]);

  // ============ 토스트 함수 (기존 보존) ============
  const showToast = useCallback((message: string, type: 'success' | 'error' | 'warning' | 'info') => {
    setToast({ message, type, isVisible: true });
  }, []);

  // ============ 기존 모든 이펙트 및 함수들 보존 ============
  
  // 다크모드 적용 (기존과 동일)
  useEffect(() => {
    if (isDark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDark]);

  // 타이머 로직 (기존과 동일)
  useEffect(() => {
    if (isRunning) {
      intervalRef.current = window.setInterval(() => {
        setCurrentTime(Date.now() - startTimeRef.current);
      }, 10);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isRunning]);

  // 키보드 이벤트 (확장)
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) return;
      if (showLanding || showDetailedAnalysis || showHelp) return;

      switch (e.code) {
        case 'F1':
          e.preventDefault();
          setShowHelp(true);
          break;
      }
      
      // Ctrl 조합키
      if (e.ctrlKey) {
        switch (e.code) {
          case 'KeyE':
            e.preventDefault();
            downloadMeasurementData();
            break;
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [showLanding, showDetailedAnalysis, showHelp]);

  // 데이터 무결성 검증 (신규 - 위험 예방대책)
  useEffect(() => {
    if (sessions.length > 0 || allLapTimes.length > 0) {
      const report = validateDataIntegrity(sessions, allLapTimes);
      if (!report.isValid) {
        console.warn('데이터 무결성 경고:', report);
        if (report.recommendations.length > 0) {
          showToast(`데이터 무결성 경고: ${report.recommendations[0]}`, 'warning');
        }
      }
    }
  }, [sessions, allLapTimes, validateDataIntegrity]);

  // ============ 모든 기존 함수들 보존 ============

  const downloadMeasurementData = useCallback(() => {
    if (lapTimes.length === 0) {
      showToast('다운로드할 측정 기록이 없습니다.', 'warning');
      return;
    }

    if (!currentSession) {
      showToast('활성 세션이 없습니다.', 'error');
      return;
    }

    const success = ExportService.exportMeasurementData(currentSession, lapTimes);
    if (success) {
      showToast('측정 기록이 다운로드되었습니다.', 'success');
    } else {
      showToast('다운로드에 실패했습니다. 다시 시도해주세요.', 'error');
    }
  }, [lapTimes, currentSession, showToast]);

  // ============ 계산된 값들 (기존 보존) ============
  const analysis = useMemo(() => {
    const validation = ValidationService.validateGageRRAnalysis(lapTimes);
    return validation.isValid ? AnalysisService.calculateGageRR(lapTimes) : null;
  }, [lapTimes]);

  // ============ 랜딩 페이지 (기존 보존) ============
  if (showLanding) {
    return <ModernLandingPage onStart={() => setShowLanding(false)} />;
  }

  // ============ 상세 분석 페이지 (신규) ============
  if (showDetailedAnalysis) {
    return (
      <DetailedAnalysisPage
        lapTimes={lapTimes}
        currentSession={currentSession}
        onBack={() => setShowDetailedAnalysis(false)}
        isDark={isDark}
        onShowToast={showToast}
      />
    );
  }

  // ============ 메인 화면 (간소화된 UI) ============
  return (
    <div className={`min-h-screen ${theme.bg}`}>
      {/* 토스트 메시지 */}
      <ToastComponent
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onClose={() => setToast(prev => ({ ...prev, isVisible: false }))}
      />

      {/* 뒤로가기 경고 */}
      <BackWarning isVisible={showBackWarning} />

      {/* 도움말 모달 */}
      <HelpModal isVisible={showHelp} onClose={() => setShowHelp(false)} isDark={isDark} />

      {/* 헤더 */}
      <div className={`${theme.card} shadow-sm border-b ${theme.border} sticky top-0 z-40`}>
        <div className="max-w-md mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 flex-1 min-w-0">
              <Zap className="w-6 h-6 text-blue-500 flex-shrink-0" />
              <div className="min-w-0">
                <h1 className={`text-base font-bold ${theme.text} truncate`}>
                  물류 인시수 측정 타이머
                </h1>
                <div className={`text-xs ${theme.textMuted} truncate`}>
                  측정부터 분석까지 한번에
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2 flex-shrink-0">
              <button
                onClick={() => setShowHelp(true)}
                className={`p-2 rounded-lg transition-colors ${theme.textMuted} hover:${theme.textSecondary} ${theme.surfaceHover}`}
                title="도움말 (F1)"
              >
                <HelpCircle className="w-5 h-5" />
              </button>
              <button
                onClick={() => setIsDark(!isDark)}
                className={`p-2 rounded-lg transition-colors ${theme.textMuted} hover:${theme.textSecondary} ${theme.surfaceHover}`}
              >
                {isDark ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
              </button>
              <button
                onClick={() => setShowLanding(true)}
                className={`p-2 rounded-lg transition-colors ${theme.textMuted} hover:text-red-500 ${theme.surfaceHover}`}
              >
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-md mx-auto p-4 space-y-4">
        {/* 간소화된 메인 UI */}
        <div className={`${theme.card} rounded-lg p-4 shadow-sm border ${theme.border}`}>
          <div className="text-center py-8">
            <h2 className={`text-xl font-bold ${theme.text} mb-4`}>물류 인시수 측정 시스템</h2>
            <p className={`text-sm ${theme.textMuted} mb-6`}>
              정밀한 측정과 Gage R&R 분석을 위한 전문 도구
            </p>
            
            {/* 상세분석 버튼 */}
            <button
              onClick={() => {
                if (lapTimes.length < 3) {
                  showToast('상세 분석을 위해서는 최소 3개의 측정 기록이 필요합니다.', 'warning');
                } else {
                  setShowDetailedAnalysis(true);
                }
              }}
              disabled={lapTimes.length < 3}
              className="bg-purple-500 text-white py-3 px-6 rounded-lg text-sm font-medium hover:bg-purple-600 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2 transition-colors mx-auto"
            >
              <PieChart className="w-4 h-4" />
              <span>상세 분석 시작</span>
            </button>
            
            <div className="mt-4">
              <button
                onClick={downloadMeasurementData}
                disabled={lapTimes.length === 0}
                className="bg-green-500 text-white py-2 px-4 rounded-lg text-sm font-medium hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center justify-center space-x-2 transition-colors mx-auto"
              >
                <Download className="w-4 h-4" />
                <span>CSV 다운로드</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EnhancedLogisticsTimer;
