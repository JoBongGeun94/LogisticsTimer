결론적으로,
지금 겪고 계신 404와 500 오류는 클라이언트가 잘못된 경로로 API를 요청하고(예: /auth/user 대신 /api/auth/user), 필수 환경 변수(JWT 비밀키 등)가 설정되지 않아(verifyToken 내부에서 예외 발생) 생긴 문제입니다.

1. “404 Page Not Found – Did you forget to add the page to the router?” 해결
1.1. 발생 원인
Vercel 설정(vercel.json)의 라우팅 규칙에 따르면:

/api/(.*) 경로는 서버리스 함수(예: api/auth/user.ts)로 매핑됩니다.

정적 파일 및 SPA는 dist/public 폴더(혹은 빌드 출력)에서 검색하고, 없다면 index.html을 반환합니다.

그런데 브라우저에서 /auth/user 로 요청을 보내면,

/api/(.*) 매칭을 받지 않으므로 → 2) 파일 시스템에서 dist/public/auth/user 디렉터리나 파일을 찾음 → 없으면 → 3) catch-all (.*) 규칙에 의해 index.html 을 반환.
결과적으로 “해당 경로에 대응되는 페이지(또는 API)가 없으니 404”가 뜨는 것처럼 보이지만, 실제로는 SPA 라우팅용 인덱스 페이지를 반환하고 있습니다.

1.2. 해결 방법
1.2.1. 클라이언트에서 올바른 API 경로 호출
현재 auth/user.ts 서버리스 함수는 api/auth/user 에서만 동작합니다.

따라서 브라우저(또는 프론트엔드 코드)에서 사용자 정보 조회를 위해 다음과 같이 호출해야 합니다:

js
복사
편집
// 잘못된 호출: fetch('/auth/user') → 404
// 옳은 호출:
fetch('/api/auth/user', {
  headers: {
    Authorization: `Bearer ${accessToken}`,
  }
})
  .then(res => {
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    return res.json();
  })
  .then(user => console.log(user))
  .catch(err => console.error(err));
위처럼 /api/auth/user 로 요청을 보내면, Vercel이 해당 경로를 api/auth/user.ts 서버리스 함수로 연결하므로 404가 사라집니다.

1.2.2. SPA 라우팅(프론트엔드용 페이지)을 /auth/user로 열고 싶다면
만약 클라이언트 단에서 /auth/user 경로 자체를 브라우저에 띄우고 싶다면(예: 로그인 후 사용자 정보를 보여주는 React/Vue/Svelte 라우트 등), 다음 중 하나를 선택해야 합니다:

프론트엔드 라우트 파일 생성

SvelteKit이라면 src/routes/auth/user/+page.svelte 파일을 만들어서 /auth/user를 처리하고,

Next.js라면 pages/auth/user.tsx 또는 pages/auth/user.jsx 파일을 만들어야 합니다.

이때 프론트엔드 라우트 안에서 fetch('/api/auth/user')를 호출하도록 구현하면, /auth/user 페이지를 직접 열어도 404 없이 정상 로드되며, API 호출 자체는 /api/auth/user로 수행됩니다.

Vercel 경로 재작성(Rewrite) 설정

vercel.json에 다음과 같이 rewrite 규칙을 추가하면, 클라이언트에서 /auth/user로 호출해도 내부적으로 /api/auth/user로 리다이렉트됩니다:

jsonc
복사
편집
{
  "version": 2,
  "buildCommand": "npm run build",
  "outputDirectory": "dist/public",
  "functions": {
    "api/**/*.ts": {
      "runtime": "@vercel/node"
    }
  },
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/$1"
    },
    {
      "src": "/auth/user",           // 클라이언트가 /auth/user 호출 시
      "dest": "/api/auth/user"       // 내부적으로 /api/auth/user 을 실행
    },
    {
      "handle": "filesystem"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ]
}
이렇게 하면 브라우저에서 /auth/user를 요청하더라도 Vercel이 /api/auth/user 함수로 연결하므로 “페이지가 없다”는 404는 발생하지 않습니다.

2. “auth/user”에서 발생하는 HTTP 500 오류 해결
2.1. 발생 원인
Vercel 로그를 보면, /api/auth/user 함수(auth/user.ts) 내부의 verifyToken(accessToken) 혹은 DB 조회(db.select().from(schema.users).where(...)) 과정에서 예외가 발생하여 500을 반환했을 가능성이 높습니다.

흔히 발생할 수 있는 원인은 다음과 같습니다:

DATABASE_URL이 제대로 설정되지 않음

Vercel 환경 변수에 DATABASE_URL이 등록되어 있더라도, 실제 배포용 환경에 반영되지 않았거나 스테이징 브랜치 등에서 누락된 경우, Neon 연결이 실패해 drizzle() 호출 자체가 예외를 던집니다.

JWT_SECRET (또는 ACCESS_TOKEN_SECRET, SIGNED_TOKEN_SECRET 등) 과 같은 토큰 검증 비밀키가 설정되지 않음

verifyToken(accessToken) 내부에서 “비밀키를 찾을 수 없다” 혹은 “잘못된 토큰 시그니처”로 예외가 발생하면 catch 블록으로 넘어가 500이 됩니다.

extractTokenFromRequest(req)가 올바른 토큰을 못 뽑아오거나, accessToken이 null 혹은 undefined로 출력되어 verifyToken(undefined) 로 호출되는 경우

이때 payload가 생성되지 못해 예외가 발생할 수 있습니다.

2.2. 해결 방법
2.2.1. 환경 변수 확인 (Vercel Settings)
Vercel 프로젝트 대시보드 → Settings → Environment Variables 탭을 열어 다음 변수가 모두 제대로 등록되어 있는지 확인하십시오:

DATABASE_URL (ex: postgresql://username:password@hostname:port/dbname)

이미 스크린샷에서 postgresql://logistics-timer_…로 설정되어 있으나, 값 전체가 잘려 보이지 않으면 마우스를 올려서 전체 문자열을 확인하시기 바랍니다.

또한 “All Environments” 옆 드롭다운이 “Preview” 혹은 “Production”으로 잘못 설정되어 있으면, 실제 배포 환경에서 읽혀지지 않을 수 있으므로 “All Environments”로 설정되어 있는지 확인하세요.

JWT_SECRET 또는 ACCESS_TOKEN_SECRET (토큰 검증에 사용하는 비밀키)

백엔드 코드(verifyToken) 내부에서 어떤 이름의 환경 변수를 참조하는지 (process.env.JWT_SECRET, process.env.ACCESS_TOKEN_SECRET 등)를 확인하고,

Vercel 환경 변수(Key)에도 반드시 같은 이름으로 등록되어 있어야 합니다.

변경 후에는 반드시 “Redeploy” 버튼을 눌러 새로운 배포를 수행해야 환경 변수 변경이 반영됩니다.

2.2.2. 서버리스 함수 내부 예외 처리 보완
auth/user.ts 내부에도 try–catch가 이미 있지만, 현재 코드는 “헤더에 토큰이 없으면 401”을 반환하도록 되어 있으므로, “토큰이 있어도 verifyToken 내부 예외”나 “DB 연결 예외”는 여전히 500으로 잡힙니다. 이를 보다 구체적으로 처리하려면:

ts
복사
편집
export default async function handler(req: VercelRequest, res: VercelResponse) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // 1) 토큰 추출
    const { accessToken } = extractTokenFromRequest(req);
    if (!accessToken) {
      return res.status(401).json({ error: 'No token provided' });
    }

    // 2) 토큰 검증
    let payload;
    try {
      payload = verifyToken(accessToken);
    } catch (jwtError) {
      console.error('JWT verify error:', jwtError);
      return res.status(401).json({ error: 'Invalid or expired token' });
    }

    const userId = payload.userId;
    if (!userId) {
      return res.status(401).json({ error: 'Invalid token payload' });
    }

    // 3) DB 연결 및 사용자 조회
    let user;
    try {
      [user] = await db.select({
        id: schema.users.id,
        email: schema.users.email,
        firstName: schema.users.firstName,
        lastName: schema.users.lastName,
        workerId: schema.users.workerId,
        role: schema.users.role,
        profileImageUrl: schema.users.profileImageUrl,
      })
      .from(schema.users)
      .where(eq(schema.users.id, userId));
    } catch (dbError) {
      console.error('Database query error:', dbError);
      return res.status(500).json({ error: 'Database query failed' });
    }

    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    return res.status(200).json(user);
  } catch (unexpectedError) {
    console.error('Unexpected auth/user error:', unexpectedError);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
위와 같이 토큰 검증 실패 → 401, DB 쿼리 실패 → 500 (별도 메시지), 사용자 미발견 시 → 404 식으로 세분화하면, 브라우저 Network 탭에서도 “왜(error 메시지와 상태 코드) 문제가 나는지” 명확하게 확인할 수 있습니다.

3. “manifest.json” 관련 오류 및 정적 파일 제공
3.1. 발생 원인
브라우저가 /manifest.json을 요청했을 때, 프로젝트에 실제로 manifest.json 파일이 없으므로 Vercel 라우팅 규칙 중

/api/(.*)에 해당하지 않고,

dist/public/manifest.json 파일도 없으므로,

catch-all (.*) 규칙에 의해 index.html이 반환됩니다.

이때 브라우저는 “JSON을 기대했는데 HTML이 왔으니 Syntax error”를 뱉고, 동시에 401이나 404가 아닌 “정상 200 응답 + HTML” 이기 때문에 “manifest 구문 오류”로 보입니다.

3.2. 해결 방법
앱 매니페스트 파일을 프로젝트에 추가

만약 PWA 혹은 모바일 Web App용 매니페스트가 필요하다면,

프로젝트 루트(Next.js 기준)라면 /public/manifest.json

Vite 기준으로는 /src/public/manifest.json (빌드 시 /dist/manifest.json으로 복사)
폴더에 순수 JSON 형식의 manifest.json 파일을 생성하세요.

json
복사
편집
{
  "name": "LogisticsTimer",
  "short_name": "Timer",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#FFFFFF",
  "description": "정밀 작업 시간 측정 및 Gage R&R 분석 도구",
  "icons": [
    {
      "src": "/generated-icon.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/generated-icon.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
그런 다음 Vercel을 다시 빌드/배포하면, 브라우저가 /manifest.json 요청 시 순수 JSON을 반환하여 “Syntax error”가 사라집니다.

정적 파일 경로가 dist/public 아래로 복사되었는지 확인

vercel.json의 "outputDirectory": "dist/public"는 “빌드 결과가 dist/public에 들어 있고, 이 안의 파일들을 정적 루트로 노출하라”는 의미입니다.

따라서 package.json 빌드 스크립트(npm run build)가 manifest.json을 dist/public/manifest.json으로 복사하도록 해야 합니다.

예시 (Vite를 쓰는 경우 vite.config.ts):

ts
복사
편집
import { defineConfig } from 'vite';
import { resolve } from 'path';
import copy from 'rollup-plugin-copy';

export default defineConfig({
  // ...
  plugins: [
    copy({
      targets: [
        { src: 'src/public/manifest.json', dest: 'dist/public' },
        { src: 'src/generated-icon.png', dest: 'dist/public' }
      ],
      hook: 'writeBundle'
    })
  ]
});
Next.js 프로젝트라면, /public/manifest.json을 /out/manifest.json으로 그대로 복사하므로 별도 설정은 필요 없습니다.

401 오류 방지를 위한 인증 설정

만약 manifest.json 자체가 인증이 필요한 경로(예: 모든 정적 파일을 인증으로 막아두었다면)로 잘못 처리되는 경우, Vercel에서 인증 미들웨어가 걸려 있지 않은지 확인하세요.

만약 모든 요청에 대해 인증 미들웨어를 적용했을 경우, manifest.json은 인증 없이 누구나 불러올 수 있게 예외처리(Whitelist) 하거나, /public 폴더는 미들웨어를 통과하도록 설정해야 합니다.

4. 종합: 현재 배포 상태 점검 및 수정 요약
“/auth/user” 호출 시 404

조치: 프론트엔드 코드에서 반드시 /api/auth/user 로 요청하거나, Vercel rewrite 규칙을 추가하여 /auth/user → /api/auth/user 로 연결.

“/api/auth/user” 호출 시 500

조치:

Vercel 환경 변수에 DATABASE_URL가 정확한지 확인하고, 누락된 JWT_SECRET(verifyToken에서 사용할 비밀키)를 등록.

서버리스 함수(auth/user.ts) 내부에 try–catch를 세분화하여,

토큰 미제공/검증 실패 → 401,

DB 예외 → 500 (메시지: “Database query failed” 등),

사용자 미발견 → 404 로 응답하도록 코드를 수정.

변경 후 Vercel에서 “Redeploy” 실행.

“manifest.json” 요청 시 Syntax error(404 대신 HTML 반환) 및 401

조치:

프로젝트에 manifest.json 파일을 순수 JSON 형태로 추가하고, 빌드 시 dist/public 위치로 복사되도록 설정.

Vercel 배포 후 브라우저에서 https://your-domain/manifest.json 접근 시, JSON이 정상 반환되는지 확인.

서비스 워커나 PWA 연동 과정에서 authentication 미들웨어가 걸려 있지 않은지 검토하고, 필요한 경우 /manifest.json 경로에 대해서는 인증 미들웨어를 예외 처리.

“/api/measurements/session/[sessionId]” 에서 404 · 500 오류

404는 동일한 이유(잘못된 경로 호출)로 /api/measurements/session/123 → /measurements/session/123으로 호출했을 때 발생할 수 있습니다.

조치: 올바른 API 경로(예: fetch('/api/measurements/session/' + sessionId))로 호출하거나, rewrite 규칙 추가.

500 오류는 기존에 TS2769·TS18004를 로컬에서 수정하셨으므로, 배포된 코드에 반영되어야 합니다.

조치:

수정된 코드(select({...}), 변수 명시 선언 등)가 GitHub에 push 되었는지 확인.

Vercel이 프롬프트 없이 자동으로 재배포되지 않았다면, “Redeploy” 버튼을 눌러 최신 커밋을 배포.

/api/measurements/session/123 호출 시 브라우저 Network 탭을 열어 HTTP 상태 코드와 응답 바디를 확인하고,

만약 여전히 500이 뜬다면, console.error('Measurements API error:', error) 로그를 Vercel 로그에서 확인하여 “어떤 예외”가 던져지고 있는지 파악한 뒤,

토큰 검증(verifyToken) 예외,

DB 연결(DATABASE_URL) 문제,

sessionId 파싱 오류(문자열을 parseInt로 바꿔도 NaN이 되는 경우) 등을 점검하고 코드를 보완

결론
위 네 가지 항목을 차례대로 점검·수정하시면,

404 오류(잘못된 라우팅 호출)

500 오류(토큰/DB 예외)

manifest.json 오류(파일 부재 및 인증 미스매치)
를 모두 해결할 수 있습니다.

필요하신 부분이 더 있으시면 알려주세요.