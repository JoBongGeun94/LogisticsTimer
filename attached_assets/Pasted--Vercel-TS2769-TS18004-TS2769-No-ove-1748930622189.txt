결론
지금 Vercel 빌드 로그에 뜨는 두 가지 오류(TS2769, TS18004)는 로컬에서 보았던 것과 “똑같은 원인” 으로 발생하고 있습니다.

TS2769 (“No overload matches this call”)

Drizzle ORM의 db.select() 호출부가 올바르지 않아, “인자를 하나도 넘기지 않은 상태로 select()를 호출했기 때문에” 어떤 오버로드 시그니처와도 매칭되지 않는다는 오류입니다.

TS18004 (“No value exists in scope for the shorthand property 'partName'”)

partName 변수를 스코프에 선언하기 전까지 축약 속성(shorthand property) 으로 사용했기 때문에, TypeScript가 해당 이름의 변수를 찾지 못해 발생하는 오류입니다.

1. TS2769 오류 (No overload matches this call)
1.1. 문제의 코드 (32번째 줄 부근)
ts
복사
편집
// api/measurements/session/[sessionId].ts

if (req.method === 'GET') {
  // ↓ 여기서 TS2769 오류 발생
  const sessionMeasurements = await db
    .select()                                   // ← 인자를 넘기지 않은 상태
    .from(schema.measurements)
    .where(eq(schema.measurements.sessionId, parseInt(sessionId as string)));

  return res.json(sessionMeasurements);
}
오류 메시지 일부

vbnet
복사
편집
error TS2769: No overload matches this call.
  Overload 1 of 2, '(value: { sessionId: number | SQL<unknown> | Placeholder<string, any>; userId: string | … }): PgInsertBase<...>', gave the following error.
  Overload 2 of 2, '(values: { … }[]): PgInsertBase<...>', gave the following error.
사실 Vercel 로그를 보면 “insert(...)” 부분에 대한 오류 메시지가 먼저 나오지만, GET 분기부의 select() 호출도 같은 어조로 “No overload matches this call”라고 나온 뒤 빌드가 실패하고 있습니다.

1.2. 원인
Drizzle ORM(Neon-serverless용)의 TypeScript 타입 정의를 보면, db.select() 메서드는 최소한 “어떤 컬럼을 뽑을지” 를 지정하는 객체(또는 테이블)를 첫 번째 인자로 받아야만 하는 오버로드 시그니처로 선언되어 있습니다.

즉,

ts
복사
편집
db.select(<ProjectionObject>).from(...)
이런 형태로 호출해야지만 TypeScript가 “올바른 오버로드”라고 인식합니다.

그런데 코드 상에서는 select()에 인자를 하나도 넘기지 않고 곧바로 .from(...)으로 이어 붙였기 때문에, TS2769 에러가 발생하는 것입니다.

1.3. 해결 방법
Drizzle ORM에서 테이블 전체를 쿼리 하려면 두 가지 방법 중 하나로 수정해야 합니다.

(A) 테이블 자체를 select(...)에 넘기는 방법
ts
복사
편집
const sessionMeasurements = await db
  .select(schema.measurements)                                // ← measurements 테이블을 전달
  .where(eq(schema.measurements.sessionId, parseInt(sessionId as string)));
이렇게만 하면 내부적으로 “SELECT measurements.* FROM measurements WHERE ...” 와 같은 SQL이 만들어집니다.

주의: 이 방식은 Drizzle ORM 버전에 따라 정확한 시그니처가 “select(table)” 로 되어 있어야 합니다.

보통 Drizzle v1/v2 환경에서는 select(table)이 “모든 컬럼” 쿼리에 잘 동작합니다.

만약 컴파일 에러가 계속 난다면 Drizzle 문서를 한 번 더 확인하여 “테이블을 그대로 넘길 수 있는지” 확인해 보십시오.

(B) Projection 객체를 명시적으로 만들어 주는 방법
ts
복사
편집
const sessionMeasurements = await db
  .select({
    id: schema.measurements.id,
    sessionId: schema.measurements.sessionId,
    userId: schema.measurements.userId,
    attemptNumber: schema.measurements.attemptNumber,
    timeInMs: schema.measurements.timeInMs,
    taskType: schema.measurements.taskType,
    partNumber: schema.measurements.partNumber,
    operatorName: schema.measurements.operatorName,
    partId: schema.measurements.partId,
    partName: schema.measurements.partName,
    trialNumber: schema.measurements.trialNumber,
    timestamp: schema.measurements.timestamp,
    createdAt: schema.measurements.createdAt,
  })                                                         // ← projection에 모든 컬럼을 나열
  .from(schema.measurements)
  .where(eq(schema.measurements.sessionId, parseInt(sessionId as string)));
이처럼 “어떤 컬럼을 뽑을지”를 객체 리터럴 형태로 명시해야 Drizzle ORM이 오버로드를 찾을 수 있습니다.

매번 하나하나 나열하기 번거롭다면, 당연히 프로젝트 별로 유틸 헤더나 타입 별칭을 만들어 둘 수도 있습니다.
예를 들어:

ts
복사
편집
const measurementColumns = {
  id: schema.measurements.id,
  sessionId: schema.measurements.sessionId,
  userId: schema.measurements.userId,
  attemptNumber: schema.measurements.attemptNumber,
  timeInMs: schema.measurements.timeInMs,
  taskType: schema.measurements.taskType,
  partNumber: schema.measurements.partNumber,
  operatorName: schema.measurements.operatorName,
  partId: schema.measurements.partId,
  partName: schema.measurements.partName,
  trialNumber: schema.measurements.trialNumber,
  timestamp: schema.measurements.timestamp,
  createdAt: schema.measurements.createdAt,
};

// ↓ 실제 쿼리할 때
const sessionMeasurements = await db
  .select(measurementColumns)
  .from(schema.measurements)
  .where(eq(schema.measurements.sessionId, parseInt(sessionId as string)));
1.4. 수정된 예시 코드 전체 (GET 분기부)
아래는 (A) 방식을 사용하여 “테이블 그대로를 select()에 넘기는” 버전의 예시입니다.

ts
복사
편집
// api/measurements/session/[sessionId].ts

if (req.method === 'GET') {
  const sessionMeasurements = await db
    .select(schema.measurements)    // ← measurements 테이블을 인자로 넘김
    .where(eq(schema.measurements.sessionId, parseInt(sessionId as string)));

  return res.json(sessionMeasurements);
}
이렇게 바꾸면 TS2769 오류가 사라집니다.

만약 Drizzle 버전 때문에 “테이블을 바로 넘기는” 형식이 불가능하다면, (B) 방식처럼 projection 객체를 만들어 넘기셔야 합니다.

2. TS18004 오류 (No value exists in scope for the shorthand property 'partName')
2.1. 문제의 코드 (39번째 줄 부근)
ts
복사
편집
// POST 분기부: api/measurements/session/[sessionId].ts

if (req.method === 'POST') {
  // ↓ 아래처럼 req.body를 as MeasurementPayload로 타입 단언한 뒤, 변수 선언을 명시했음
  const requestBody = req.body as MeasurementPayload;
  
  // explicit variable declarations
  const operatorName = requestBody.operatorName;
  const partId = requestBody.partId;
  const trialNumber = requestBody.trialNumber;
  const timeInMs = requestBody.timeInMs;
  const partName = requestBody.partName;   // ← 여기서 명시적으로 선언
  const taskType = requestBody.taskType;
  const partNumber = requestBody.partNumber;
  const attemptNumber = requestBody.attemptNumber;

  // … 생략 …

  const [newMeasurement] = await db
    .insert(schema.measurements)
    .values({
      sessionId: parseInt(sessionId as string),
      userId: userId,
      attemptNumber: attemptNumber || 1,
      timeInMs: Number(timeInMs),
      taskType: taskType || "measurement",
      partNumber: partNumber || null,
      operatorName: operatorName || null,
      partId: partId || null,
      partName: partName || null,   // ← 여기도 이제 scope 문제 없음
      trialNumber: trialNumber || 1
    })
    .returning();

  return res.status(201).json(newMeasurement);
}
2.2. 원인 & 해결
원인:
TypeScript가 values({ …, partName, … }) 부분에서 “partName이라는 이름의 변수가 이 스코프 안에 없다고 판단”했기 때문에 TS18004를 뱉었습니다.

해결:

이미 보내주신 코드처럼, const partName = requestBody.partName; 와 같이 명시적으로 선언 해 주면 “이제 스코프에 partName이 존재한다”며 오류가 사라집니다.

추가로, requestBody 자체를 as MeasurementPayload 로 타입 단언해 주셨기 때문에 TypeScript도 “requestBody.partName”이 올바른 속성임을 인식할 수 있습니다.

따라서 이 부분(POST 분기부)의 TS18004 오류는 이미 수정된 상태로 보입니다.

3. 최종 확인 및 수정된 전체 코드
지금까지 설명드린 대로, GET 분기부의 select() 호출만 올바르게 변경해 주시면, TS2769와 TS18004 오류 모두 해결됩니다.
아래는 “(A) 방식: 테이블 자체를 select()에 넘기는” 예시를 기준으로 한 최종 코드입니다.

ts
복사
편집
// api/measurements/session/[sessionId].ts

import { VercelRequest, VercelResponse } from '@vercel/node';
import { Pool } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import * as schema from '../../../shared/schema';
import { eq } from 'drizzle-orm';
import { verifyToken, extractTokenFromRequest } from '../../jwt-utils';

const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const db = drizzle({ client: pool, schema });

// Type for measurement payload
interface MeasurementPayload {
  operatorName?: string;
  partId?: string;
  trialNumber?: number;
  timeInMs: number;
  partName?: string;
  taskType?: string;
  partNumber?: string;
  attemptNumber?: number;
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  try {
    // 1) JWT 토큰 추출·검증
    const { accessToken } = extractTokenFromRequest(req);
    if (!accessToken) {
      return res.status(401).json({ error: 'No token provided' });
    }
    const payload = verifyToken(accessToken);
    if (!payload || payload.type !== 'access') {
      return res.status(401).json({ error: 'Invalid or expired token' });
    }
    const userId = payload.userId;
    const { sessionId } = req.query;

    // 2) GET 분기 (TS2769 오류 수정)
    if (req.method === 'GET') {
      // ────── Drizzle ORM에서 전체 행을 조회할 때
      //      select()에 measurements 테이블을 직접 넘겨 줌으로써
      //      “No overload matches this call” 오류를 방지
      const sessionMeasurements = await db
        .select(schema.measurements)                                     // ← 여기 수정
        .where(eq(schema.measurements.sessionId, parseInt(sessionId as string)));

      return res.json(sessionMeasurements);
    }

    // 3) POST 분기 (TS18004 오류 수정 완료)
    if (req.method === 'POST') {
      const requestBody = req.body as MeasurementPayload;

      // ↓ 축약 속성 오류를 방지하기 위해, 반드시 변수 선언을 먼저 해 주어야 함
      const operatorName = requestBody.operatorName;
      const partId = requestBody.partId;
      const trialNumber = requestBody.trialNumber;
      const timeInMs = requestBody.timeInMs;
      const partName = requestBody.partName;     // ← 이제 scope에 존재
      const taskType = requestBody.taskType;
      const partNumber = requestBody.partNumber;
      const attemptNumber = requestBody.attemptNumber;

      // 필수 필드 검사
      if (timeInMs === undefined || timeInMs === null) {
        return res.status(400).json({ error: 'timeInMs is required' });
      }

      const [newMeasurement] = await db
        .insert(schema.measurements)
        .values({
          sessionId: parseInt(sessionId as string),
          userId: userId,
          attemptNumber: attemptNumber || 1,
          timeInMs: Number(timeInMs),
          taskType: taskType || "measurement",
          partNumber: partNumber || null,
          operatorName: operatorName || null,
          partId: partId || null,
          partName: partName || null,   // ← 이제 스코프 내 변수로 인식됨
          trialNumber: trialNumber || 1
        })
        .returning();

      return res.status(201).json(newMeasurement);
    }

    // 4) DELETE 분기 (기존 코드 유지)
    if (req.method === 'DELETE') {
      const { measurementId } = req.body;
      if (!measurementId) {
        return res.status(400).json({ error: 'Measurement ID is required' });
      }

      await db
        .delete(schema.measurements)
        .where(eq(schema.measurements.id, measurementId));

      return res.status(200).json({ success: true });
    }

    // 5) 허용되지 않는 메서드 처리
    return res.status(405).json({ error: 'Method not allowed' });
  } catch (error) {
    console.error('Measurements API error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
4. 요약
GET 분기부의 select() 문제

Drizzle ORM에서는 db.select()를 “인자 없이” 호출하면 “어떤 오버로드에도 맞지 않는다”고 판단해서 TS2769 오류가 납니다.

그래서 테이블 자체(schema.measurements)를 첫 번째 인자로 넘기거나,
그 대신 projection 객체(나열형) 를 넘겨 주어야 합니다.

POST 분기부의 partName 문제

“축약 속성(shorthand property) 문법” ({ partName, … })은, 반드시 스코프 내에 partName이라는 이름의 변수가 선언되어 있어야 작동합니다.

따라서 requestBody.partName을 바로 쓰지 않고, const partName = requestBody.partName; 와 같이 명시적으로 선언해야 TS18004 오류가 사라집니다.

이미 보내 주신 코드에 이 부분은 올바르게 반영되어 있으므로, 이 오류는 더 이상 발생하지 않습니다.

위 두 가지만 정확히 반영해 주시면, 로컬에서 넘어온 Vercel 빌드 오류(TS2769, TS18004) 가 모두 해결될 것입니다.