첫 번째 오류(TS2769)는 GET 요청을 처리하는 부분, 즉

ts
복사
편집
const sessionMeasurements = await db
  .select()
  .from(schema.measurements)
  .where(eq(schema.measurements.sessionId, Number(sessionId)));
이 호출부(코드상 약 31–34번째 줄)에서 발생합니다. 구체적으로, db.select()를 인자 없이 호출한 뒤 이어지는 .from(...) 체인이 현재 사용 중인 Drizzle ORM 버전의 오버로드 시그니처와 맞지 않기 때문에 “No overload matches this call” 오류가 납니다.

두 번째 오류(TS18004)는 POST 요청을 처리하는 부분, 즉

ts
복사
편집
const {
  operatorName,
  partId,
  trialNumber,
  timeInMs,
  partName,      // ← 여기
  taskType,
  partNumber,
  attemptNumber
} = req.body;

// … 생략 …

const [newMeasurement] = await db
  .insert(schema.measurements)
  .values({
    sessionId: Number(sessionId),
    userId: userId,
    attemptNumber: attemptNumber || 1,
    timeInMs: Number(timeInMs),
    taskType: taskType || "measurement",
    partNumber: partNumber || null,
    operatorName: operatorName || null,
    partId: partId || null,
    partName: partName || null,   // ← 여기
    trialNumber: trialNumber || 1
  })
  .returning();
이 부분(코드상 약 39번째 줄 전후)에서 partName을 “축약 속성(shorthand property)”처럼 사용했지만, 실제 스코프(scope) 안에 partName이라는 이름의 변수가 선언되어 있지 않아서 “No value exists in scope for the shorthand property 'partName'” 오류가 발생합니다.

1. TS2769 (“No overload matches this call”)
▶ 발생 위치
ts
복사
편집
// api/measurements/session/[sessionId].ts 약 31–34행
const sessionMeasurements = await db
  .select()                                      // ← 이 부분에서 오류 발생 (32행)
  .from(schema.measurements)
  .where(eq(schema.measurements.sessionId, Number(sessionId)));
▶ 왜 오류가 나는가 (근거·배경)
Drizzle ORM의 select() 오버로드 시그니처 불일치

Drizzle ORM (neon-serverless용)에서는 db.select() 메서드가 “인자를 반드시 하나 이상 전달받는 형태”로 선언돼 있고,

예를 들어 db.select({...columns}).from(table), 또는 db.select(table), 혹은 db.select({ table: {...columns} }) 같은 형식을 기대합니다.

그런데 코드에서는 인자 없이 db.select()만 호출하고 곧바로 .from(...)으로 이어가고 있기 때문에, TypeScript 입장에서는 “select() 메서드에 전달하는 인자가 현재 정의된 어떤 오버로드 시그니처와도 일치하지 않는다”고 판단하며 TS2769를 뿜습니다.

해결을 위해 확인해야 할 사항

사용 중인 Drizzle ORM 버전에서 select()를 어떻게 호출해야 하는지 공식 문서를 참고해야 합니다.

예를 들어,

ts
복사
편집
// (가) 전체 컬럼을 가져오려면 table 객체를 첫 인자로 전달하거나
const sessionMeasurements = await db
  .select({ *: schema.measurements.* })      // Drizzle v2 문법 예시
  .from(schema.measurements)
  .where(eq(schema.measurements.sessionId, Number(sessionId)));
또는

ts
복사
편집
// (나) 테이블을 직접 select에 전달
const sessionMeasurements = await db
  .select(schema.measurements)                 // ↔ select(table) 오버로드
  .where(eq(schema.measurements.sessionId, Number(sessionId)));
처럼 호출해야 맞는 경우가 많습니다.

즉, “인자 없는 select() 호출”이 현재 프로젝트가 설치한 Drizzle 버전에 맞지 않기 때문에 오류가 납니다.

2. TS18004 (“No value exists in scope for the shorthand property 'partName'”)
▶ 발생 위치
ts
복사
편집
// api/measurements/session/[sessionId].ts 약 39행
const {
  operatorName,
  partId,
  trialNumber,
  timeInMs,
  partName,      // ← 여기가 39행 근처
  taskType,
  partNumber,
  attemptNumber
} = req.body;

// … 중략 …

const [newMeasurement] = await db
  .insert(schema.measurements)
  .values({
    sessionId: Number(sessionId),
    userId: userId,
    attemptNumber: attemptNumber || 1,
    timeInMs: Number(timeInMs),
    taskType: taskType || "measurement",
    partNumber: partNumber || null,
    operatorName: operatorName || null,
    partId: partId || null,
    partName: partName || null,   // ← 에러 지점
    trialNumber: trialNumber || 1
  })
  .returning();
▶ 왜 오류가 나는가 (근거·배경)
축약 속성(Shorthand Property)의 전제 조건

TypeScript/JavaScript의 “축약 속성” 문법({ partName })은,

ts
복사
편집
const partName = "어떤 값";
const obj = { partName };    // obj = { partName: "어떤 값" }
이런 식으로 “객체 리터럴 내부에서 프로퍼티 이름과 동일한 이름의 변수 혹은 파라미터가 이미 선언되어 있어야” 사용 가능합니다.

그런데 현재 코드에서는 req.body에서 partName을 꺼내온다고 작성만 해두었을 뿐,

실제로 req.body 타입이 어떻게 정의돼 있는지,

또는 req.body에서 구조분해 할당 시 partName이 제대로 넘어오고 있는지 TypeScript 차원에서 보장되지 않으면,

TS 컴파일러가 “현재 이 스코프 안에 partName이라는 이름의 변수(또는 값을 가진 심볼)가 정의된 적이 없다”고 간주하기 때문에 “No value exists in scope for the shorthand property 'partName'” 오류를 발생시킵니다.

구체적인 원인

const { operatorName, partId, ..., partName } = req.body; 이 부분이 실제로 동작하려면,

req.body가 “일반 객체”이어야 하고(any라도 구조분해가 가능),

TypeScript 쪽에서 req.body의 타입 선언(interface 혹은 type)에 partName이 포함되어 있어야 합니다.

만약 req.body 타입이 any가 아닌 unknown 또는 Record<string, unknown> 등으로 잡혀 있으면,

TS는 “req.body.partName이 우선 어떤 타입인지 모르기 때문에, 스코프 안에 ‘partName’이 선언됐다고 볼 수 없다”고 판단할 수 있습니다.

또는 본문 코드를 파일에 붙여넣는 과정에서 “const { partName } = req.body;”가 빠져 있는 상태로 보일 경우에도(예: 실제 컴파일 대상 소스와 콘솔에서 보는 코드가 불일치할 때) 같은 오류가 발생합니다.

해결을 위해 확인해야 할 사항

(A) req.body 타입을 명시적으로 선언하거나

ts
복사
편집
// 예시: req.body의 타입을 미리 정의
interface MeasurementPayload {
  operatorName?: string;
  partId?: number;
  trialNumber?: number;
  timeInMs: number;
  partName?: string;
  taskType?: string;
  partNumber?: string;
  attemptNumber?: number;
}

const {
  operatorName,
  partId,
  trialNumber,
  timeInMs,
  partName,      // 이제 타입 선언부에 partName이 포함되어 있으므로 오류 없음
  taskType,
  partNumber,
  attemptNumber
} = req.body as MeasurementPayload;
(B) 혹은 구조분해 할당을 분리하여,

ts
복사
편집
const body = req.body as Record<string, unknown>;
// 필요한 속성을 직접 불러온 뒤
const partName = typeof body.partName === 'string' ? body.partName : null;
// … 나머지 필드도 같은 식으로 변환 …
이렇게 “partName 변수가 실제로 스코프에 선언되어 있다”는 사실을 TypeScript에게 명확히 보여줘야 합니다.

즉, “축약 속성”을 쓰기 전에

req.body가 어떤 구조로 들어오는지,

그 구조 안에 partName이 실제로 있음을 TypeScript가 인지하고 있는지
이 두 가지를 먼저 보장해야 TS18004 오류가 사라집니다.

정리
TS2769:

발생 위치 → db.select().from(schema.measurements).where(...) (코드상 약 31–34행)

원인 → select() 메서드를 인자 없이 호출함으로써, 현재 Drizzle ORM 버전의 어떤 오버로드 시그니처와도 매칭되지 않기 때문

조치 → Drizzle 문서를 참고하여 올바른 select(...) 호출 방식(예: select(schema.measurements) 혹은 select({ *: measurements.* }))으로 수정

TS18004:

발생 위치 → const { …, partName, … } = req.body; 및 이후 partName을 객체 리터럴에 축약 속성으로 사용할 때(코드상 약 39행 전후)

원인 → TypeScript 입장에서 “현재 스코프 안에 partName이라는 이름의 값이 선언되어 있지 않다”고 간주되기 때문에 축약 속성으로 사용할 수 없음

조치 →

req.body 타입(인터페이스/타입별칭)을 명확히 정의하여 TypeScript가 partName 존재를 인식하게 하거나,

구조분해 할당 이전에 const partName = … 식으로 직접 변수를 선언해서 스코프에 존재함을 분명히 보여줄 것

위 두 지점을 차례로 수정하시면, 더 이상 컴파일 시 TS2769와 TS18004 오류가 발생하지 않습니다.